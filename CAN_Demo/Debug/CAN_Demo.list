
CAN_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bfc  08004bfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08004c74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004c74  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eda6  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279b  00000000  00000000  0002ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00031620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b68  00000000  00000000  000324e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001959a  00000000  00000000  00033048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011561  00000000  00000000  0004c5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eaeb  00000000  00000000  0005db43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004484  00000000  00000000  000ec630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f0ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b4c 	.word	0x08004b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004b4c 	.word	0x08004b4c

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000150:	4b28      	ldr	r3, [pc, #160]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000152:	4a29      	ldr	r2, [pc, #164]	; (80001f8 <MX_CAN_Init+0xac>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000156:	4b27      	ldr	r3, [pc, #156]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000158:	2204      	movs	r2, #4
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800015c:	4b25      	ldr	r3, [pc, #148]	; (80001f4 <MX_CAN_Init+0xa8>)
 800015e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000162:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000164:	4b23      	ldr	r3, [pc, #140]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000166:	2200      	movs	r2, #0
 8000168:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800016a:	4b22      	ldr	r3, [pc, #136]	; (80001f4 <MX_CAN_Init+0xa8>)
 800016c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000170:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000172:	4b20      	ldr	r3, [pc, #128]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000178:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017a:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <MX_CAN_Init+0xa8>)
 800017c:	2200      	movs	r2, #0
 800017e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000180:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000182:	2200      	movs	r2, #0
 8000184:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000186:	4b1b      	ldr	r3, [pc, #108]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000188:	2200      	movs	r2, #0
 800018a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018c:	4b19      	ldr	r3, [pc, #100]	; (80001f4 <MX_CAN_Init+0xa8>)
 800018e:	2200      	movs	r2, #0
 8000190:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000192:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <MX_CAN_Init+0xa8>)
 8000194:	2200      	movs	r2, #0
 8000196:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000198:	4b16      	ldr	r3, [pc, #88]	; (80001f4 <MX_CAN_Init+0xa8>)
 800019a:	2200      	movs	r2, #0
 800019c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019e:	4815      	ldr	r0, [pc, #84]	; (80001f4 <MX_CAN_Init+0xa8>)
 80001a0:	f000 fd5a 	bl	8000c58 <HAL_CAN_Init>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001aa:	f000 faaf 	bl	800070c <Error_Handler>
  CAN_Init(&mCAN, &hcan, Node1_TX_ID);
  CAN_Config_Filtering(&mCAN, Node2_TX_ID, CAN_FILTER_FIFO0);
  //CAN_Config_Filtering(&mCAN, Node2_TX_ID, CAN_FILTER_FIFO1);
  printf("Set Node_1's ID!\r\n");
#else
  CAN_Init(&mCAN, &hcan, Node2_TX_ID);
 80001ae:	f240 3201 	movw	r2, #769	; 0x301
 80001b2:	4910      	ldr	r1, [pc, #64]	; (80001f4 <MX_CAN_Init+0xa8>)
 80001b4:	4811      	ldr	r0, [pc, #68]	; (80001fc <MX_CAN_Init+0xb0>)
 80001b6:	f000 f891 	bl	80002dc <CAN_Init>
  CAN_Config_Filtering(&mCAN, Node1_TX_ID, CAN_FILTER_FIFO0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f240 1103 	movw	r1, #259	; 0x103
 80001c0:	480e      	ldr	r0, [pc, #56]	; (80001fc <MX_CAN_Init+0xb0>)
 80001c2:	f000 f8a7 	bl	8000314 <CAN_Config_Filtering>
  //CAN_Config_Filtering(&mCAN, Node1_TX_ID, CAN_FILTER_FIFO1);
  printf("Set Node_2's ID!\r\n");
 80001c6:	480e      	ldr	r0, [pc, #56]	; (8000200 <MX_CAN_Init+0xb4>)
 80001c8:	f003 fe50 	bl	8003e6c <puts>
#endif
  // Activate the notification
  if (HAL_CAN_ActivateNotification(&hcan,
 80001cc:	f248 0107 	movw	r1, #32775	; 0x8007
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <MX_CAN_Init+0xa8>)
 80001d2:	f001 f939 	bl	8001448 <HAL_CAN_ActivateNotification>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <MX_CAN_Init+0x94>
      CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_MSG_PENDING
          | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
  {
    Error_Handler();
 80001dc:	f000 fa96 	bl	800070c <Error_Handler>
  }
  // Start CAN communication
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <MX_CAN_Init+0xa8>)
 80001e2:	f000 fefd 	bl	8000fe0 <HAL_CAN_Start>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <MX_CAN_Init+0xa4>
  {
    Error_Handler();
 80001ec:	f000 fa8e 	bl	800070c <Error_Handler>
  }
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200000e4 	.word	0x200000e4
 80001f8:	40006400 	.word	0x40006400
 80001fc:	200000d8 	.word	0x200000d8
 8000200:	08004b64 	.word	0x08004b64

08000204 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if (canHandle->Instance == CAN1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <HAL_CAN_MspInit+0xcc>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d151      	bne.n	80002c8 <HAL_CAN_MspInit+0xc4>
     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
#else
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000224:	4b2b      	ldr	r3, [pc, #172]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	4a2a      	ldr	r2, [pc, #168]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 800022a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800022e:	61d3      	str	r3, [r2, #28]
 8000230:	4b28      	ldr	r3, [pc, #160]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 8000232:	69db      	ldr	r3, [r3, #28]
 8000234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	4a24      	ldr	r2, [pc, #144]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 8000242:	f043 0304 	orr.w	r3, r3, #4
 8000246:	6193      	str	r3, [r2, #24]
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <HAL_CAN_MspInit+0xd0>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
     PA11     ------> CAN_RX
     PA12     ------> CAN_TX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	4619      	mov	r1, r3
 8000268:	481b      	ldr	r0, [pc, #108]	; (80002d8 <HAL_CAN_MspInit+0xd4>)
 800026a:	f001 fd01 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800026e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000274:	2302      	movs	r3, #2
 8000276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000278:	2303      	movs	r3, #3
 800027a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	4815      	ldr	r0, [pc, #84]	; (80002d8 <HAL_CAN_MspInit+0xd4>)
 8000284:	f001 fcf4 	bl	8001c70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 15, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	210f      	movs	r1, #15
 800028c:	2013      	movs	r0, #19
 800028e:	f001 fc06 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000292:	2013      	movs	r0, #19
 8000294:	f001 fc1f 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 15, 0);
 8000298:	2200      	movs	r2, #0
 800029a:	210f      	movs	r1, #15
 800029c:	2014      	movs	r0, #20
 800029e:	f001 fbfe 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002a2:	2014      	movs	r0, #20
 80002a4:	f001 fc17 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	210f      	movs	r1, #15
 80002ac:	2015      	movs	r0, #21
 80002ae:	f001 fbf6 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80002b2:	2015      	movs	r0, #21
 80002b4:	f001 fc0f 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	210f      	movs	r1, #15
 80002bc:	2016      	movs	r0, #22
 80002be:	f001 fbee 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80002c2:	2016      	movs	r0, #22
 80002c4:	f001 fc07 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
#endif
  }
}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40006400 	.word	0x40006400
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010800 	.word	0x40010800

080002dc <CAN_Init>:
#endif
}

uint8_t CAN_Init(CAN_HandlerStruct *Canhandler, CAN_HandleTypeDef *hcan,
    uint16_t ID)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	4613      	mov	r3, r2
 80002e8:	80fb      	strh	r3, [r7, #6]
  Canhandler->Canhandler = hcan;
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	601a      	str	r2, [r3, #0]
  Canhandler->SenderID = ID;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	88fa      	ldrh	r2, [r7, #6]
 80002f4:	809a      	strh	r2, [r3, #4]
  Canhandler->FilterBank = 0;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	2200      	movs	r2, #0
 80002fa:	80da      	strh	r2, [r3, #6]
  Canhandler->FlagDataIT = 0;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	2200      	movs	r2, #0
 8000300:	721a      	strb	r2, [r3, #8]
  Canhandler->FlagDataIT1 = 0;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	2200      	movs	r2, #0
 8000306:	725a      	strb	r2, [r3, #9]
  return HAL_OK;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <CAN_Config_Filtering>:

uint32_t CAN_Config_Filtering(CAN_HandlerStruct *Canhandler, uint16_t NodeID,
    uint32_t mFIFO)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08e      	sub	sp, #56	; 0x38
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	460b      	mov	r3, r1
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	817b      	strh	r3, [r7, #10]
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = ENABLE;
 8000322:	2301      	movs	r3, #1
 8000324:	633b      	str	r3, [r7, #48]	; 0x30
  canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
  canfilterconfig.FilterFIFOAssignment = mFIFO; //CAN_FILTER_FIFO1;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	623b      	str	r3, [r7, #32]
#ifdef Board0
  canfilterconfig.FilterIdHigh = 0x0000; //Node2_TX_ID << 5;
  canfilterconfig.FilterIdLow = 0x0000;
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node2_TX_ID << 5;
#else
  canfilterconfig.FilterIdHigh = 0x0000; //Node1_TX_ID << 5;
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdLow = 0x0000;
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterMaskIdHigh = 0x0000; //Node1_TX_ID << 5;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
#endif
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800033e:	2300      	movs	r3, #0
 8000340:	62bb      	str	r3, [r7, #40]	; 0x28
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000342:	2301      	movs	r3, #1
 8000344:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_CAN_ConfigFilter(Canhandler->Canhandler, &canfilterconfig) != HAL_OK)
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f107 0210 	add.w	r2, r7, #16
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fd7c 	bl	8000e4e <HAL_CAN_ConfigFilter>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <CAN_Config_Filtering+0x4c>
  {
    Error_Handler();
 800035c:	f000 f9d6 	bl	800070c <Error_Handler>
  }
  return HAL_OK;
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3738      	adds	r7, #56	; 0x38
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <CAN_Send_Test>:

uint8_t CAN_Send_Test(CAN_HandlerStruct *Canhandler)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  CAN_Tx_Header.DLC = 8;  // data length
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <CAN_Send_Test+0x68>)
 8000376:	2208      	movs	r2, #8
 8000378:	611a      	str	r2, [r3, #16]
  CAN_Tx_Header.IDE = CAN_ID_STD;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <CAN_Send_Test+0x68>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  CAN_Tx_Header.RTR = CAN_RTR_DATA;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <CAN_Send_Test+0x68>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
#ifdef Board0
  CAN_Tx_Header.StdId = Node1_TX_ID;  // ID
#else
  CAN_Tx_Header.StdId = Node2_TX_ID;  // ID
 8000386:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <CAN_Send_Test+0x68>)
 8000388:	f240 3201 	movw	r2, #769	; 0x301
 800038c:	601a      	str	r2, [r3, #0]
#endif
  CAN_CNT++;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <CAN_Send_Test+0x6c>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <CAN_Send_Test+0x6c>)
 8000398:	801a      	strh	r2, [r3, #0]
  CAN_TX_Buffer[0] = CAN_CNT >> 8;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <CAN_Send_Test+0x6c>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	0a1b      	lsrs	r3, r3, #8
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <CAN_Send_Test+0x70>)
 80003a6:	701a      	strb	r2, [r3, #0]
  CAN_TX_Buffer[1] = CAN_CNT & 0xFF;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <CAN_Send_Test+0x6c>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <CAN_Send_Test+0x70>)
 80003b0:	705a      	strb	r2, [r3, #1]
  if (HAL_CAN_AddTxMessage(Canhandler->Canhandler, &CAN_Tx_Header,
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6818      	ldr	r0, [r3, #0]
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <CAN_Send_Test+0x74>)
 80003b8:	4a08      	ldr	r2, [pc, #32]	; (80003dc <CAN_Send_Test+0x70>)
 80003ba:	4906      	ldr	r1, [pc, #24]	; (80003d4 <CAN_Send_Test+0x68>)
 80003bc:	f000 fe54 	bl	8001068 <HAL_CAN_AddTxMessage>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <CAN_Send_Test+0x5e>
      CAN_TX_Buffer, &CAN_Mailbox) != HAL_OK)
  {
    Error_Handler();
 80003c6:	f000 f9a1 	bl	800070c <Error_Handler>
  }
  return HAL_OK;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000a4 	.word	0x200000a4
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	20000000 	.word	0x20000000
 80003e0:	200000a0 	.word	0x200000a0

080003e4 <HAL_CAN_RxFifo0FullCallback>:
    FreeLevel = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_FILTER_FIFO0);
  }
  return HAL_OK;
}
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  printf("full\r\n");
 80003ec:	4812      	ldr	r0, [pc, #72]	; (8000438 <HAL_CAN_RxFifo0FullCallback+0x54>)
 80003ee:	f003 fd3d 	bl	8003e6c <puts>
  if (HAL_CAN_DeactivateNotification(hcan,
 80003f2:	2106      	movs	r1, #6
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f001 f84c 	bl	8001492 <HAL_CAN_DeactivateNotification>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <HAL_CAN_RxFifo0FullCallback+0x20>
  CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
  {
    Error_Handler();
 8000400:	f000 f984 	bl	800070c <Error_Handler>
  }
#ifdef Board0
  CAN_Init(&mCAN, hcan, Node1_TX_ID);
  CAN_Config_Filtering(&mCAN, Node2_TX_ID, CAN_FILTER_FIFO1);
#else
  CAN_Init(&mCAN, hcan, Node2_TX_ID);
 8000404:	f240 3201 	movw	r2, #769	; 0x301
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <HAL_CAN_RxFifo0FullCallback+0x58>)
 800040c:	f7ff ff66 	bl	80002dc <CAN_Init>
  CAN_Config_Filtering(&mCAN, Node1_TX_ID, CAN_FILTER_FIFO1);
 8000410:	2201      	movs	r2, #1
 8000412:	f240 1103 	movw	r1, #259	; 0x103
 8000416:	4809      	ldr	r0, [pc, #36]	; (800043c <HAL_CAN_RxFifo0FullCallback+0x58>)
 8000418:	f7ff ff7c 	bl	8000314 <CAN_Config_Filtering>
#endif
  if (HAL_CAN_ActivateNotification(hcan,
 800041c:	2130      	movs	r1, #48	; 0x30
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f001 f812 	bl	8001448 <HAL_CAN_ActivateNotification>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <HAL_CAN_RxFifo0FullCallback+0x4a>
  CAN_IT_RX_FIFO1_FULL | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
  {
    Error_Handler();
 800042a:	f000 f96f 	bl	800070c <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	08004b80 	.word	0x08004b80
 800043c:	200000d8 	.word	0x200000d8

08000440 <HAL_CAN_RxFifo1FullCallback>:
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  printf("full\r\n");
 8000448:	4812      	ldr	r0, [pc, #72]	; (8000494 <HAL_CAN_RxFifo1FullCallback+0x54>)
 800044a:	f003 fd0f 	bl	8003e6c <puts>
  if (HAL_CAN_DeactivateNotification(hcan,
 800044e:	2130      	movs	r1, #48	; 0x30
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f001 f81e 	bl	8001492 <HAL_CAN_DeactivateNotification>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <HAL_CAN_RxFifo1FullCallback+0x20>
  CAN_IT_RX_FIFO1_FULL | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
  {
    Error_Handler();
 800045c:	f000 f956 	bl	800070c <Error_Handler>
  }
#ifdef Board0
  CAN_Init(&mCAN, hcan, Node1_TX_ID);
  CAN_Config_Filtering(&mCAN, Node2_TX_ID, CAN_FILTER_FIFO0);
#else
  CAN_Init(&mCAN, hcan, Node2_TX_ID);
 8000460:	f240 3201 	movw	r2, #769	; 0x301
 8000464:	6879      	ldr	r1, [r7, #4]
 8000466:	480c      	ldr	r0, [pc, #48]	; (8000498 <HAL_CAN_RxFifo1FullCallback+0x58>)
 8000468:	f7ff ff38 	bl	80002dc <CAN_Init>
  CAN_Config_Filtering(&mCAN, Node1_TX_ID, CAN_FILTER_FIFO0);
 800046c:	2200      	movs	r2, #0
 800046e:	f240 1103 	movw	r1, #259	; 0x103
 8000472:	4809      	ldr	r0, [pc, #36]	; (8000498 <HAL_CAN_RxFifo1FullCallback+0x58>)
 8000474:	f7ff ff4e 	bl	8000314 <CAN_Config_Filtering>
#endif
  if (HAL_CAN_ActivateNotification(hcan,
 8000478:	2106      	movs	r1, #6
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f000 ffe4 	bl	8001448 <HAL_CAN_ActivateNotification>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <HAL_CAN_RxFifo1FullCallback+0x4a>
  CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
  {
    Error_Handler();
 8000486:	f000 f941 	bl	800070c <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	08004b80 	.word	0x08004b80
 8000498:	200000d8 	.word	0x200000d8

0800049c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &CAN_Rx_Header, CAN_RX_Buffer1);
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80004a6:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 feab 	bl	8001206 <HAL_CAN_GetRxMessage>
  mCAN.FlagDataIT1 = 1;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	725a      	strb	r2, [r3, #9]
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000094 	.word	0x20000094
 80004c4:	200000bc 	.word	0x200000bc
 80004c8:	200000d8 	.word	0x200000d8

080004cc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CAN_Rx_Header, CAN_RX_Buffer);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004d8:	2100      	movs	r1, #0
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 fe93 	bl	8001206 <HAL_CAN_GetRxMessage>
  mCAN.FlagDataIT = 1;
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	721a      	strb	r2, [r3, #8]
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	200000bc 	.word	0x200000bc
 80004f8:	200000d8 	.word	0x200000d8

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <MX_GPIO_Init+0xa8>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_GPIO_Init+0xa8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_GPIO_Init+0xac>)
 8000578:	f001 fcfe 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_OnBoard_Pin;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2302      	movs	r3, #2
 800058c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_OnBoard_GPIO_Port, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xac>)
 8000596:	f001 fb6b 	bl	8001c70 <HAL_GPIO_Init>

}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000

080005ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim3.Instance)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d102      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
   //HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
   CAN_Send_Test(&mCAN);
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005c2:	f7ff fed3 	bl	800036c <CAN_Send_Test>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000110 	.word	0x20000110
 80005d4:	200000d8 	.word	0x200000d8

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fad9 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f84d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f7ff ff89 	bl	80004fc <MX_GPIO_Init>

  MX_TIM3_Init();
 80005ea:	f000 f9a9 	bl	8000940 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fa1b 	bl	8000a28 <MX_USART2_UART_Init>

  MX_CAN_Init();
 80005f2:	f7ff fdab 	bl	800014c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005f6:	481c      	ldr	r0, [pc, #112]	; (8000668 <main+0x90>)
 80005f8:	f002 f950 	bl	800289c <HAL_TIM_Base_Start_IT>
  printf("Init done!\r\n");
 80005fc:	481b      	ldr	r0, [pc, #108]	; (800066c <main+0x94>)
 80005fe:	f003 fc35 	bl	8003e6c <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
    if(mCAN.FlagDataIT == 1)
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <main+0x98>)
 8000604:	7a1b      	ldrb	r3, [r3, #8]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d114      	bne.n	8000634 <main+0x5c>
    {
      //To do:
      //printf("%x, %x \r\n", CAN_RX_Buffer[0], CAN_RX_Buffer[1]);
      //Clear buffer
      for(uint8_t i = 0; i < 8; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e006      	b.n	800061e <main+0x46>
      {
        CAN_RX_Buffer[i] = 0;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0x9c>)
 8000614:	2100      	movs	r1, #0
 8000616:	54d1      	strb	r1, [r2, r3]
      for(uint8_t i = 0; i < 8; i++)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d9f5      	bls.n	8000610 <main+0x38>
      }
      mCAN.FlagDataIT = 0;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <main+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	721a      	strb	r2, [r3, #8]
      HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <main+0xa0>)
 8000630:	f001 fcba 	bl	8001fa8 <HAL_GPIO_TogglePin>
    }
    if(mCAN.FlagDataIT1 == 1)
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <main+0x98>)
 8000636:	7a5b      	ldrb	r3, [r3, #9]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1e2      	bne.n	8000602 <main+0x2a>
    {
      //To do:
      //printf("%x, %x \r\n", CAN_RX_Buffer1[0], CAN_RX_Buffer1[1]);
      //Clear buffer
      for(uint8_t i = 0; i < 8; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	71bb      	strb	r3, [r7, #6]
 8000640:	e006      	b.n	8000650 <main+0x78>
      {
        CAN_RX_Buffer1[i] = 0;
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <main+0xa4>)
 8000646:	2100      	movs	r1, #0
 8000648:	54d1      	strb	r1, [r2, r3]
      for(uint8_t i = 0; i < 8; i++)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	3301      	adds	r3, #1
 800064e:	71bb      	strb	r3, [r7, #6]
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d9f5      	bls.n	8000642 <main+0x6a>
      }
      mCAN.FlagDataIT1 = 0;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	725a      	strb	r2, [r3, #9]
      HAL_GPIO_TogglePin(LED_OnBoard_GPIO_Port, LED_OnBoard_Pin);
 800065c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <main+0xa0>)
 8000662:	f001 fca1 	bl	8001fa8 <HAL_GPIO_TogglePin>
    if(mCAN.FlagDataIT == 1)
 8000666:	e7cc      	b.n	8000602 <main+0x2a>
 8000668:	20000110 	.word	0x20000110
 800066c:	08004b88 	.word	0x08004b88
 8000670:	200000d8 	.word	0x200000d8
 8000674:	2000008c 	.word	0x2000008c
 8000678:	40011000 	.word	0x40011000
 800067c:	20000094 	.word	0x20000094

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fccc 	bl	800402c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fc87 	bl	8001fdc <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006d4:	f000 f81a 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fef4 	bl	80024e0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006fe:	f000 f805 	bl	800070c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error");
 8000714:	4801      	ldr	r0, [pc, #4]	; (800071c <Error_Handler+0x10>)
 8000716:	f003 fb43 	bl	8003da0 <iprintf>
  while (1)
 800071a:	e7fe      	b.n	800071a <Error_Handler+0xe>
 800071c:	08004b94 	.word	0x08004b94

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_MspInit+0x40>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <HAL_MspInit+0x40>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <HAL_MspInit+0x40>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_MspInit+0x40>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_MspInit+0x40>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_MspInit+0x40>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 fa39 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80007ba:	f000 fe90 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000e4 	.word	0x200000e4

080007c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007ce:	f000 fe86 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000e4 	.word	0x200000e4

080007dc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <CAN1_RX1_IRQHandler+0x10>)
 80007e2:	f000 fe7c 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000e4 	.word	0x200000e4

080007f0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <CAN1_SCE_IRQHandler+0x10>)
 80007f6:	f000 fe72 	bl	80014de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000e4 	.word	0x200000e4

08000804 <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM3_IRQHandler+0x10>)
 800080a:	f002 f899 	bl	8002940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000110 	.word	0x20000110

08000818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <USART2_IRQHandler+0x10>)
 800081e:	f002 fcbf 	bl	80031a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000158 	.word	0x20000158

0800082c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e00a      	b.n	8000854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800083e:	f3af 8000 	nop.w
 8000842:	4601      	mov	r1, r0
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	b2ca      	uxtb	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	dbf0      	blt.n	800083e <_read+0x12>
  }

  return len;
 800085c:	687b      	ldr	r3, [r7, #4]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800088c:	605a      	str	r2, [r3, #4]
  return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <_isatty>:

int _isatty(int file)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f003 fbe6 	bl	80040c8 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20005000 	.word	0x20005000
 8000928:	00000400 	.word	0x00000400
 800092c:	2000010c 	.word	0x2000010c
 8000930:	200002f0 	.word	0x200002f0

08000934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM3_Init+0x94>)
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_TIM3_Init+0x98>)
 8000960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000964:	2247      	movs	r2, #71	; 0x47
 8000966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM3_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = Timer_Period -1;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000970:	f240 122b 	movw	r2, #299	; 0x12b
 8000974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM3_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM3_Init+0x94>)
 8000984:	f001 ff3a 	bl	80027fc <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800098e:	f7ff febd 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM3_Init+0x94>)
 80009a0:	f002 f8d6 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f7ff feaf 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM3_Init+0x94>)
 80009bc:	f002 faac 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009c6:	f7ff fea1 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000110 	.word	0x20000110
 80009d8:	40000400 	.word	0x40000400

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_TIM_Base_MspInit+0x44>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d113      	bne.n	8000a16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_TIM_Base_MspInit+0x48>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <HAL_TIM_Base_MspInit+0x48>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_TIM_Base_MspInit+0x48>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	201d      	movs	r0, #29
 8000a0c:	f001 f847 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a10:	201d      	movs	r0, #29
 8000a12:	f001 f860 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40000400 	.word	0x40000400
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f002 faca 	bl	8002ff8 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f7ff fe4f 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000158 	.word	0x20000158
 8000a78:	40004400 	.word	0x40004400

08000a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <HAL_UART_MspInit+0x98>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d137      	bne.n	8000b0c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa6:	61d3      	str	r3, [r2, #28]
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0x9c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000acc:	2304      	movs	r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <HAL_UART_MspInit+0xa0>)
 8000ae0:	f001 f8c6 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	4809      	ldr	r0, [pc, #36]	; (8000b1c <HAL_UART_MspInit+0xa0>)
 8000af8:	f001 f8ba 	bl	8001c70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2026      	movs	r0, #38	; 0x26
 8000b02:	f000 ffcc 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b06:	2026      	movs	r0, #38	; 0x26
 8000b08:	f000 ffe5 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800

08000b20 <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, UART_Delay);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	230a      	movs	r3, #10
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <_write+0x24>)
 8000b36:	f002 faaf 	bl	8003098 <HAL_UART_Transmit>
  return len;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000158 	.word	0x20000158

08000b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff fef4 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b4e:	490c      	ldr	r1, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b64:	4c09      	ldr	r4, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f003 faaf 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b76:	f7ff fd2f 	bl	80005d8 <main>
  bx lr
 8000b7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b84:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 8000b88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b8c:	200002f0 	.word	0x200002f0

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 ff6f 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	200f      	movs	r0, #15
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fdb6 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 ff87 	bl	8001af2 <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 ff4f 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	200001a0 	.word	0x200001a0

08000c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	200001a0 	.word	0x200001a0

08000c58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0ed      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fac4 	bl	8000204 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c8c:	f7ff ffda 	bl	8000c44 <HAL_GetTick>
 8000c90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c92:	e012      	b.n	8000cba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c94:	f7ff ffd6 	bl	8000c44 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d90b      	bls.n	8000cba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e0c5      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0e5      	beq.n	8000c94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0202 	bic.w	r2, r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffb4 	bl	8000c44 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffb0 	bl	8000c44 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e09f      	b.n	8000e46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e5      	bne.n	8000ce0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	7e1b      	ldrb	r3, [r3, #24]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d108      	bne.n	8000d2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e007      	b.n	8000d3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7e5b      	ldrb	r3, [r3, #25]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e9b      	ldrb	r3, [r3, #26]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d108      	bne.n	8000d82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0220 	orr.w	r2, r2, #32
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e007      	b.n	8000d92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0220 	bic.w	r2, r2, #32
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7edb      	ldrb	r3, [r3, #27]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d108      	bne.n	8000dac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0210 	bic.w	r2, r2, #16
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f042 0210 	orr.w	r2, r2, #16
 8000dba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d108      	bne.n	8000dd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0208 	orr.w	r2, r2, #8
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e007      	b.n	8000de6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0208 	bic.w	r2, r2, #8
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7f5b      	ldrb	r3, [r3, #29]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0204 	bic.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	ea42 0103 	orr.w	r1, r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b087      	sub	sp, #28
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	7cfb      	ldrb	r3, [r7, #19]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d003      	beq.n	8000e74 <HAL_CAN_ConfigFilter+0x26>
 8000e6c:	7cfb      	ldrb	r3, [r7, #19]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	f040 80aa 	bne.w	8000fc8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d123      	bne.n	8000ef6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ed0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3248      	adds	r2, #72	; 0x48
 8000ed6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eec:	6979      	ldr	r1, [r7, #20]
 8000eee:	3348      	adds	r3, #72	; 0x48
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	440b      	add	r3, r1
 8000ef4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d122      	bne.n	8000f44 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3248      	adds	r2, #72	; 0x48
 8000f24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3a:	6979      	ldr	r1, [r7, #20]
 8000f3c:	3348      	adds	r3, #72	; 0x48
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fba:	f023 0201 	bic.w	r2, r3, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e006      	b.n	8000fd6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
  }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d12e      	bne.n	8001052 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800100c:	f7ff fe1a 	bl	8000c44 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff fe16 	bl	8000c44 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e012      	b.n	8001060 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e5      	bne.n	8001014 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e006      	b.n	8001060 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
  }
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800107c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d003      	beq.n	8001094 <HAL_CAN_AddTxMessage+0x2c>
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	2b02      	cmp	r3, #2
 8001090:	f040 80ad 	bne.w	80011ee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10a      	bne.n	80010b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8095 	beq.w	80011de <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	0e1b      	lsrs	r3, r3, #24
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010be:	2201      	movs	r2, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10d      	bne.n	80010ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	6809      	ldr	r1, [r1, #0]
 80010de:	431a      	orrs	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3318      	adds	r3, #24
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	440b      	add	r3, r1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00f      	b.n	800110c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001100:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3318      	adds	r3, #24
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	440b      	add	r3, r1
 800110a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3318      	adds	r3, #24
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	440b      	add	r3, r1
 800111c:	3304      	adds	r3, #4
 800111e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d111      	bne.n	800114c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3318      	adds	r3, #24
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	3304      	adds	r3, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	6811      	ldr	r1, [r2, #0]
 800113c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3318      	adds	r3, #24
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	440b      	add	r3, r1
 8001148:	3304      	adds	r3, #4
 800114a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3307      	adds	r3, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	061a      	lsls	r2, r3, #24
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3306      	adds	r3, #6
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3305      	adds	r3, #5
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4313      	orrs	r3, r2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3204      	adds	r2, #4
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	4610      	mov	r0, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	6811      	ldr	r1, [r2, #0]
 8001174:	ea43 0200 	orr.w	r2, r3, r0
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001182:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3303      	adds	r3, #3
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	061a      	lsls	r2, r3, #24
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	4313      	orrs	r3, r2
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	4610      	mov	r0, r2
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6811      	ldr	r1, [r2, #0]
 80011aa:	ea43 0200 	orr.w	r2, r3, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	440b      	add	r3, r1
 80011b4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3318      	adds	r3, #24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	6811      	ldr	r1, [r2, #0]
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3318      	adds	r3, #24
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	440b      	add	r3, r1
 80011d8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e00e      	b.n	80011fc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e006      	b.n	80011fc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
  }
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3724      	adds	r7, #36	; 0x24
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001206:	b480      	push	{r7}
 8001208:	b087      	sub	sp, #28
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d003      	beq.n	800122a <HAL_CAN_GetRxMessage+0x24>
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b02      	cmp	r3, #2
 8001226:	f040 8103 	bne.w	8001430 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10e      	bne.n	800124e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e0f7      	b.n	800143e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0e8      	b.n	800143e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	331b      	adds	r3, #27
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0204 	and.w	r2, r3, #4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	331b      	adds	r3, #27
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0d5b      	lsrs	r3, r3, #21
 800129a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	331b      	adds	r3, #27
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	331b      	adds	r3, #27
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0202 	and.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	331b      	adds	r3, #27
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	3304      	adds	r3, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2208      	movs	r2, #8
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	e00b      	b.n	800130a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	331b      	adds	r3, #27
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 020f 	and.w	r2, r3, #15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	331b      	adds	r3, #27
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	331b      	adds	r3, #27
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0a1a      	lsrs	r2, r3, #8
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0c1a      	lsrs	r2, r3, #16
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3302      	adds	r3, #2
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0e1a      	lsrs	r2, r3, #24
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3303      	adds	r3, #3
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0a1a      	lsrs	r2, r3, #8
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3305      	adds	r3, #5
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0c1a      	lsrs	r2, r3, #16
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3306      	adds	r3, #6
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0e1a      	lsrs	r2, r3, #24
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3307      	adds	r3, #7
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e007      	b.n	800142c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e006      	b.n	800143e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001458:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d002      	beq.n	8001466 <HAL_CAN_ActivateNotification+0x1e>
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d109      	bne.n	800147a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6959      	ldr	r1, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e006      	b.n	8001488 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d002      	beq.n	80014b0 <HAL_CAN_DeactivateNotification+0x1e>
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d10a      	bne.n	80014c6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6959      	ldr	r1, [r3, #20]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	400a      	ands	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e006      	b.n	80014d4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
  }
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b08a      	sub	sp, #40	; 0x28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d07c      	beq.n	800161e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d023      	beq.n	8001576 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f983 	bl	800184c <HAL_CAN_TxMailbox0CompleteCallback>
 8001546:	e016      	b.n	8001576 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	e00c      	b.n	8001576 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e002      	b.n	8001576 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f986 	bl	8001882 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d024      	beq.n	80015ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f962 	bl	800185e <HAL_CAN_TxMailbox1CompleteCallback>
 800159a:	e016      	b.n	80015ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e002      	b.n	80015ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f965 	bl	8001894 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f941 	bl	8001870 <HAL_CAN_TxMailbox2CompleteCallback>
 80015ee:	e016      	b.n	800161e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	e00c      	b.n	800161e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e002      	b.n	800161e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f944 	bl	80018a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001638:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2210      	movs	r2, #16
 8001640:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2208      	movs	r2, #8
 800165c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe fec0 	bl	80003e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7fe ff25 	bl	80004cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2210      	movs	r2, #16
 80016a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2208      	movs	r2, #8
 80016c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7fe febc 	bl	8000440 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fedb 	bl	800049c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2210      	movs	r2, #16
 8001700:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8d8 	bl	80018b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001708:	6a3b      	ldr	r3, [r7, #32]
 800170a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f8d0 	bl	80018ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d07b      	beq.n	800182c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d072      	beq.n	8001824 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001798:	2b00      	cmp	r3, #0
 800179a:	d043      	beq.n	8001824 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03e      	beq.n	8001824 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ac:	2b60      	cmp	r3, #96	; 0x60
 80017ae:	d02b      	beq.n	8001808 <HAL_CAN_IRQHandler+0x32a>
 80017b0:	2b60      	cmp	r3, #96	; 0x60
 80017b2:	d82e      	bhi.n	8001812 <HAL_CAN_IRQHandler+0x334>
 80017b4:	2b50      	cmp	r3, #80	; 0x50
 80017b6:	d022      	beq.n	80017fe <HAL_CAN_IRQHandler+0x320>
 80017b8:	2b50      	cmp	r3, #80	; 0x50
 80017ba:	d82a      	bhi.n	8001812 <HAL_CAN_IRQHandler+0x334>
 80017bc:	2b40      	cmp	r3, #64	; 0x40
 80017be:	d019      	beq.n	80017f4 <HAL_CAN_IRQHandler+0x316>
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d826      	bhi.n	8001812 <HAL_CAN_IRQHandler+0x334>
 80017c4:	2b30      	cmp	r3, #48	; 0x30
 80017c6:	d010      	beq.n	80017ea <HAL_CAN_IRQHandler+0x30c>
 80017c8:	2b30      	cmp	r3, #48	; 0x30
 80017ca:	d822      	bhi.n	8001812 <HAL_CAN_IRQHandler+0x334>
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d002      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x2f8>
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d005      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017d4:	e01d      	b.n	8001812 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017de:	e019      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e8:	e014      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f2:	e00f      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017fc:	e00a      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e005      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001810:	e000      	b.n	8001814 <HAL_CAN_IRQHandler+0x336>
            break;
 8001812:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001822:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2204      	movs	r2, #4
 800182a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f84c 	bl	80018dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
	...

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4906      	ldr	r1, [pc, #24]	; (8001988 <__NVIC_EnableIRQ+0x34>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff90 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff2d 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff42 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff90 	bl	80019e0 <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5f 	bl	800198c <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff35 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e020      	b.n	8001b76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 020e 	bic.w	r2, r2, #14
 8001b42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d005      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e051      	b.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 020e 	bic.w	r2, r2, #14
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_DMA_Abort_IT+0xd4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d029      	beq.n	8001c22 <HAL_DMA_Abort_IT+0xa2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_DMA_Abort_IT+0xd8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d022      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x9e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_DMA_Abort_IT+0xdc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01a      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x98>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_DMA_Abort_IT+0xe0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d012      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x92>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_DMA_Abort_IT+0xe4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00a      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x8c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_DMA_Abort_IT+0xe8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <HAL_DMA_Abort_IT+0x86>
 8001c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c04:	e00e      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c0a:	e00b      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c10:	e008      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	e005      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1c:	e002      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	2310      	movs	r3, #16
 8001c20:	e000      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c22:	2301      	movs	r3, #1
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_DMA_Abort_IT+0xec>)
 8001c26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
    } 
  }
  return status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020008 	.word	0x40020008
 8001c58:	4002001c 	.word	0x4002001c
 8001c5c:	40020030 	.word	0x40020030
 8001c60:	40020044 	.word	0x40020044
 8001c64:	40020058 	.word	0x40020058
 8001c68:	4002006c 	.word	0x4002006c
 8001c6c:	40020000 	.word	0x40020000

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	; 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e169      	b.n	8001f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8158 	bne.w	8001f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a9a      	ldr	r2, [pc, #616]	; (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4a98      	ldr	r2, [pc, #608]	; (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4a98      	ldr	r2, [pc, #608]	; (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a96      	ldr	r2, [pc, #600]	; (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a96      	ldr	r2, [pc, #600]	; (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a94      	ldr	r2, [pc, #592]	; (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a94      	ldr	r2, [pc, #592]	; (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a92      	ldr	r2, [pc, #584]	; (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a92      	ldr	r2, [pc, #584]	; (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a90      	ldr	r2, [pc, #576]	; (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <HAL_GPIO_Init+0x2b4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	; 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80b1 	beq.w	8001f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6e:	492f      	ldr	r1, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	492c      	ldr	r1, [pc, #176]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4928      	ldr	r1, [pc, #160]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4922      	ldr	r1, [pc, #136]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	491e      	ldr	r1, [pc, #120]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d021      	beq.n	8001f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x2e2>
 8001f0e:	bf00      	nop
 8001f10:	10320000 	.word	0x10320000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10220000 	.word	0x10220000
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10120000 	.word	0x10120000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40011400 	.word	0x40011400
 8001f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4909      	ldr	r1, [pc, #36]	; (8001f74 <HAL_GPIO_Init+0x304>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	3301      	adds	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f ae8e 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	372c      	adds	r7, #44	; 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43d9      	mvns	r1, r3
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e272      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8087 	beq.w	800210a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d00c      	beq.n	8002022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002008:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0x5e>
 8002014:	4b8c      	ldr	r3, [pc, #560]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d10b      	bne.n	800203a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d06c      	beq.n	8002108 <HAL_RCC_OscConfig+0x12c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d168      	bne.n	8002108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e24c      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x76>
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7f      	ldr	r2, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e02e      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7a      	ldr	r2, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a77      	ldr	r2, [pc, #476]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0xbc>
 800207e:	4b72      	ldr	r3, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a71      	ldr	r2, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002098:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6a      	ldr	r2, [pc, #424]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a67      	ldr	r2, [pc, #412]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fdc4 	bl	8000c44 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fdc0 	bl	8000c44 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e200      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe4>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fdb0 	bl	8000c44 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fdac 	bl	8000c44 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1ec      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x10c>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002116:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x18c>
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x176>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c0      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4939      	ldr	r1, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x270>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe fd65 	bl	8000c44 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe fd61 	bl	8000c44 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a1      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4927      	ldr	r1, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_RCC_OscConfig+0x270>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fd44 	bl	8000c44 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe fd40 	bl	8000c44 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e180      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d03a      	beq.n	8002260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d019      	beq.n	8002226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x274>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fd24 	bl	8000c44 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe fd20 	bl	8000c44 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e160      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 face 	bl	80027c0 <RCC_Delay>
 8002224:	e01c      	b.n	8002260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_RCC_OscConfig+0x274>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe fd0a 	bl	8000c44 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002232:	e00f      	b.n	8002254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7fe fd06 	bl	8000c44 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d908      	bls.n	8002254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e146      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	42420000 	.word	0x42420000
 8002250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e9      	bne.n	8002234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a6 	beq.w	80023ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10d      	bne.n	800229a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a87      	ldr	r2, [pc, #540]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <HAL_RCC_OscConfig+0x4c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <HAL_RCC_OscConfig+0x4c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7e      	ldr	r2, [pc, #504]	; (80024a4 <HAL_RCC_OscConfig+0x4c8>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fcc7 	bl	8000c44 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7fe fcc3 	bl	8000c44 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e103      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b75      	ldr	r3, [pc, #468]	; (80024a4 <HAL_RCC_OscConfig+0x4c8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x312>
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e02d      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x334>
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a66      	ldr	r2, [pc, #408]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	e01c      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x356>
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 8002332:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a57      	ldr	r2, [pc, #348]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe fc77 	bl	8000c44 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fc73 	bl	8000c44 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0b1      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ee      	beq.n	800235a <HAL_RCC_OscConfig+0x37e>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fc61 	bl	8000c44 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fc5d 	bl	8000c44 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e09b      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8087 	beq.w	80024d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d061      	beq.n	8002494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d146      	bne.n	8002466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe fc31 	bl	8000c44 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7fe fc2d 	bl	8000c44 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e06d      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d108      	bne.n	8002420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4921      	ldr	r1, [pc, #132]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a19      	ldr	r1, [r3, #32]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	430b      	orrs	r3, r1
 8002432:	491b      	ldr	r1, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fc01 	bl	8000c44 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fbfd 	bl	8000c44 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e03d      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x46a>
 8002464:	e035      	b.n	80024d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fbea 	bl	8000c44 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fbe6 	bl	8000c44 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e026      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x498>
 8002492:	e01e      	b.n	80024d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e019      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
 80024a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x500>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0d0      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d910      	bls.n	8002524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4965      	ldr	r1, [pc, #404]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002546:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800255e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	494d      	ldr	r1, [pc, #308]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d040      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d115      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e073      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06b      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4936      	ldr	r1, [pc, #216]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fb38 	bl	8000c44 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fb34 	bl	8000c44 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e053      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d210      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4922      	ldr	r1, [pc, #136]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e032      	b.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4916      	ldr	r1, [pc, #88]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490e      	ldr	r1, [pc, #56]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266e:	f000 f821 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490a      	ldr	r1, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1cc>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1d0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fa96 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08004b9c 	.word	0x08004b9c
 80026ac:	20000008 	.word	0x20000008
 80026b0:	2000000c 	.word	0x2000000c

080026b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x30>
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0x36>
 80026e2:	e027      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 80026e6:	613b      	str	r3, [r7, #16]
      break;
 80026e8:	e027      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0c9b      	lsrs	r3, r3, #18
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_RCC_GetSysClockFreq+0x94>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0c5b      	lsrs	r3, r3, #17
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_RCC_GetSysClockFreq+0xa0>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 8002716:	fb03 f202 	mul.w	r2, r3, r2
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e004      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	613b      	str	r3, [r7, #16]
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetSysClockFreq+0x98>)
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	693b      	ldr	r3, [r7, #16]
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	007a1200 	.word	0x007a1200
 8002750:	08004bb4 	.word	0x08004bb4
 8002754:	08004bc4 	.word	0x08004bc4
 8002758:	003d0900 	.word	0x003d0900

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_RCC_GetHCLKFreq+0x10>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000008 	.word	0x20000008

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff2 	bl	800275c <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08004bac 	.word	0x08004bac

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffde 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08004bac 	.word	0x08004bac

080027c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <RCC_Delay+0x34>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <RCC_Delay+0x38>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0a5b      	lsrs	r3, r3, #9
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027dc:	bf00      	nop
  }
  while (Delay --);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	60fa      	str	r2, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <RCC_Delay+0x1c>
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000008 	.word	0x20000008
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e041      	b.n	8002892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe f8da 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f000 fa74 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e03a      	b.n	800292a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_TIM_Base_Start_IT+0x98>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d009      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIM_Base_Start_IT+0x9c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_TIM_Base_Start_IT+0xa0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b06      	cmp	r3, #6
 8002904:	d010      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	e007      	b.n	8002928 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800

08002940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9b4 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9a7 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f9b6 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0204 	mvn.w	r2, #4
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f98a 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f97d 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f98c 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d122      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d11b      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0208 	mvn.w	r2, #8
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2204      	movs	r2, #4
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f960 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f953 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f962 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d122      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11b      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f936 	bl	8002cf0 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f929 	bl	8002cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f938 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0201 	mvn.w	r2, #1
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fd fd74 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002adc:	2b80      	cmp	r3, #128	; 0x80
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa7b 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8fc 	bl	8002d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d10e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d107      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0220 	mvn.w	r2, #32
 8002b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa46 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0b4      	b.n	8002cd6 <HAL_TIM_ConfigClockSource+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d03e      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	f200 8087 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f000 8086 	beq.w	8002cc2 <HAL_TIM_ConfigClockSource+0x172>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d87f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d87b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d050      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x11a>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d877      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d03c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xfa>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d873      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d058      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x13a>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d86f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d064      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d86b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d060      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d867      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d05a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	e062      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	f000 f968 	bl	8002eda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e04f      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	f000 f951 	bl	8002eda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	609a      	str	r2, [r3, #8]
      break;
 8002c48:	e03c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8c8 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f91f 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f8e6 	bl	8002e48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2160      	movs	r1, #96	; 0x60
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f90f 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 f8a8 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f8ff 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 f8f6 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
	...

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d007      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 030a 	bic.w	r3, r3, #10
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0210 	bic.w	r2, r3, #16
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f043 0307 	orr.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e046      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e042      	b.n	8003090 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fd2c 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fd71 	bl	8003b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d16d      	bne.n	8003194 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_UART_Transmit+0x2c>
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e066      	b.n	8003196 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d6:	f7fd fdb5 	bl	8000c44 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d108      	bne.n	8003104 <HAL_UART_Transmit+0x6c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e003      	b.n	800310c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800310c:	e02a      	b.n	8003164 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 faf9 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e036      	b.n	8003196 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800313c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	3302      	adds	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	e007      	b.n	8003156 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1cf      	bne.n	800310e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2200      	movs	r2, #0
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fac9 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e006      	b.n	8003196 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b0ba      	sub	sp, #232	; 0xe8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_UART_IRQHandler+0x66>
 80031f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fbd1 	bl	80039a6 <UART_Receive_IT>
      return;
 8003204:	e25b      	b.n	80036be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80de 	beq.w	80033cc <HAL_UART_IRQHandler+0x22c>
 8003210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800321c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80d1 	beq.w	80033cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0xae>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_UART_IRQHandler+0xd2>
 800325a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xf6>
 800327e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d011      	beq.n	80032c6 <HAL_UART_IRQHandler+0x126>
 80032a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f043 0208 	orr.w	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 81f2 	beq.w	80036b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_UART_IRQHandler+0x14e>
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fb5c 	bl	80039a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_UART_IRQHandler+0x17a>
 8003312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04f      	beq.n	80033ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa66 	bl	80037ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d041      	beq.n	80033b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800335a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1d9      	bne.n	800332e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	4a7e      	ldr	r2, [pc, #504]	; (8003580 <HAL_UART_IRQHandler+0x3e0>)
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fbf6 	bl	8001b80 <HAL_DMA_Abort_IT>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033a4:	4610      	mov	r0, r2
 80033a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00e      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f99c 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00a      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f998 	bl	80036e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e006      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f994 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80033c6:	e175      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	bf00      	nop
    return;
 80033ca:	e173      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 814f 	bne.w	8003674 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8148 	beq.w	8003674 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8141 	beq.w	8003674 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80b6 	beq.w	8003584 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8145 	beq.w	80036b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003436:	429a      	cmp	r2, r3
 8003438:	f080 813e 	bcs.w	80036b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b20      	cmp	r3, #32
 800344c:	f000 8088 	beq.w	8003560 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800346a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800347c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003488:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348c:	e841 2300 	strex	r3, r2, [r1]
 8003490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1d9      	bne.n	8003450 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e1      	bne.n	800349c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003502:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800350a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	f023 0310 	bic.w	r3, r3, #16
 8003534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003542:	65ba      	str	r2, [r7, #88]	; 0x58
 8003544:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fad5 	bl	8001b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356e:	b29b      	uxth	r3, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8bf 	bl	80036fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800357c:	e09c      	b.n	80036b8 <HAL_UART_IRQHandler+0x518>
 800357e:	bf00      	nop
 8003580:	080038b1 	.word	0x080038b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 808e 	beq.w	80036bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8089 	beq.w	80036bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ce:	647a      	str	r2, [r7, #68]	; 0x44
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e3      	bne.n	80035aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3314      	adds	r3, #20
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	623b      	str	r3, [r7, #32]
   return(result);
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003606:	633a      	str	r2, [r7, #48]	; 0x30
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e3      	bne.n	80035e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	60fb      	str	r3, [r7, #12]
   return(result);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800364c:	61fa      	str	r2, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	617b      	str	r3, [r7, #20]
   return(result);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e3      	bne.n	8003628 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f844 	bl	80036fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003672:	e023      	b.n	80036bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_UART_IRQHandler+0x4f4>
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f923 	bl	80038d8 <UART_Transmit_IT>
    return;
 8003692:	e014      	b.n	80036be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <HAL_UART_IRQHandler+0x51e>
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f962 	bl	8003976 <UART_EndTransmit_IT>
    return;
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x51e>
    return;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x51e>
      return;
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x51e>
      return;
 80036bc:	bf00      	nop
  }
}
 80036be:	37e8      	adds	r7, #232	; 0xe8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b090      	sub	sp, #64	; 0x40
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003720:	e050      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d04c      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	f7fd fa88 	bl	8000c44 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373c:	429a      	cmp	r2, r3
 800373e:	d241      	bcs.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003760:	637a      	str	r2, [r7, #52]	; 0x34
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	613b      	str	r3, [r7, #16]
   return(result);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003794:	623a      	str	r2, [r7, #32]
 8003796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e00f      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d09f      	beq.n	8003722 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b095      	sub	sp, #84	; 0x54
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003814:	643a      	str	r2, [r7, #64]	; 0x40
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800381a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	61fb      	str	r3, [r7, #28]
   return(result);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	60bb      	str	r3, [r7, #8]
   return(result);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003884:	61ba      	str	r2, [r7, #24]
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038a6:	bf00      	nop
 80038a8:	3754      	adds	r7, #84	; 0x54
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff ff0c 	bl	80036e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b21      	cmp	r3, #33	; 0x21
 80038ea:	d13e      	bne.n	800396a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f4:	d114      	bne.n	8003920 <UART_Transmit_IT+0x48>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d110      	bne.n	8003920 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]
 800391e:	e008      	b.n	8003932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6211      	str	r1, [r2, #32]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4619      	mov	r1, r3
 8003940:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe94 	bl	80036c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b22      	cmp	r3, #34	; 0x22
 80039b8:	f040 80ae 	bne.w	8003b18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c4:	d117      	bne.n	80039f6 <UART_Receive_IT+0x50>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e026      	b.n	8003a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a08:	d007      	beq.n	8003a1a <UART_Receive_IT+0x74>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <UART_Receive_IT+0x82>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e008      	b.n	8003a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4619      	mov	r1, r3
 8003a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d15d      	bne.n	8003b14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0220 	bic.w	r2, r2, #32
 8003a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d135      	bne.n	8003b0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 0310 	bic.w	r3, r3, #16
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	623a      	str	r2, [r7, #32]
 8003ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	69f9      	ldr	r1, [r7, #28]
 8003aca:	6a3a      	ldr	r2, [r7, #32]
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff fdf9 	bl	80036fa <HAL_UARTEx_RxEventCallback>
 8003b08:	e002      	b.n	8003b10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fde3 	bl	80036d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e002      	b.n	8003b1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3730      	adds	r7, #48	; 0x30
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b5e:	f023 030c 	bic.w	r3, r3, #12
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <UART_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe fe04 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	e002      	b.n	8003b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe fdec 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009a      	lsls	r2, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <UART_SetConfig+0x118>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	0119      	lsls	r1, r3, #4
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <UART_SetConfig+0x118>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf0:	4419      	add	r1, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <UART_SetConfig+0x118>)
 8003c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2064      	movs	r0, #100	; 0x64
 8003c12:	fb00 f303 	mul.w	r3, r0, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	3332      	adds	r3, #50	; 0x32
 8003c1c:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	f003 020f 	and.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	51eb851f 	.word	0x51eb851f

08003c40 <std>:
 8003c40:	2300      	movs	r3, #0
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
 8003c46:	e9c0 3300 	strd	r3, r3, [r0]
 8003c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4e:	6083      	str	r3, [r0, #8]
 8003c50:	8181      	strh	r1, [r0, #12]
 8003c52:	6643      	str	r3, [r0, #100]	; 0x64
 8003c54:	81c2      	strh	r2, [r0, #14]
 8003c56:	6183      	str	r3, [r0, #24]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	305c      	adds	r0, #92	; 0x5c
 8003c5e:	f000 f9e5 	bl	800402c <memset>
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <std+0x38>)
 8003c64:	6224      	str	r4, [r4, #32]
 8003c66:	6263      	str	r3, [r4, #36]	; 0x24
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <std+0x3c>)
 8003c6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <std+0x40>)
 8003c6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <std+0x44>)
 8003c72:	6323      	str	r3, [r4, #48]	; 0x30
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	08003e7d 	.word	0x08003e7d
 8003c7c:	08003e9f 	.word	0x08003e9f
 8003c80:	08003ed7 	.word	0x08003ed7
 8003c84:	08003efb 	.word	0x08003efb

08003c88 <stdio_exit_handler>:
 8003c88:	4a02      	ldr	r2, [pc, #8]	; (8003c94 <stdio_exit_handler+0xc>)
 8003c8a:	4903      	ldr	r1, [pc, #12]	; (8003c98 <stdio_exit_handler+0x10>)
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <stdio_exit_handler+0x14>)
 8003c8e:	f000 b869 	b.w	8003d64 <_fwalk_sglue>
 8003c92:	bf00      	nop
 8003c94:	20000014 	.word	0x20000014
 8003c98:	080049b9 	.word	0x080049b9
 8003c9c:	20000020 	.word	0x20000020

08003ca0 <cleanup_stdio>:
 8003ca0:	6841      	ldr	r1, [r0, #4]
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <cleanup_stdio+0x34>)
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	4299      	cmp	r1, r3
 8003ca8:	4604      	mov	r4, r0
 8003caa:	d001      	beq.n	8003cb0 <cleanup_stdio+0x10>
 8003cac:	f000 fe84 	bl	80049b8 <_fflush_r>
 8003cb0:	68a1      	ldr	r1, [r4, #8]
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <cleanup_stdio+0x38>)
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d002      	beq.n	8003cbe <cleanup_stdio+0x1e>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fe7d 	bl	80049b8 <_fflush_r>
 8003cbe:	68e1      	ldr	r1, [r4, #12]
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <cleanup_stdio+0x3c>)
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d004      	beq.n	8003cd0 <cleanup_stdio+0x30>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f000 be74 	b.w	80049b8 <_fflush_r>
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200001a4 	.word	0x200001a4
 8003cd8:	2000020c 	.word	0x2000020c
 8003cdc:	20000274 	.word	0x20000274

08003ce0 <global_stdio_init.part.0>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <global_stdio_init.part.0+0x30>)
 8003ce4:	4c0b      	ldr	r4, [pc, #44]	; (8003d14 <global_stdio_init.part.0+0x34>)
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <global_stdio_init.part.0+0x38>)
 8003ce8:	4620      	mov	r0, r4
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	2104      	movs	r1, #4
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f7ff ffa6 	bl	8003c40 <std>
 8003cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2109      	movs	r1, #9
 8003cfc:	f7ff ffa0 	bl	8003c40 <std>
 8003d00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d04:	2202      	movs	r2, #2
 8003d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0a:	2112      	movs	r1, #18
 8003d0c:	f7ff bf98 	b.w	8003c40 <std>
 8003d10:	200002dc 	.word	0x200002dc
 8003d14:	200001a4 	.word	0x200001a4
 8003d18:	08003c89 	.word	0x08003c89

08003d1c <__sfp_lock_acquire>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <__sfp_lock_acquire+0x8>)
 8003d1e:	f000 b9fd 	b.w	800411c <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	200002e5 	.word	0x200002e5

08003d28 <__sfp_lock_release>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__sfp_lock_release+0x8>)
 8003d2a:	f000 b9f8 	b.w	800411e <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	200002e5 	.word	0x200002e5

08003d34 <__sinit>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	f7ff fff0 	bl	8003d1c <__sfp_lock_acquire>
 8003d3c:	6a23      	ldr	r3, [r4, #32]
 8003d3e:	b11b      	cbz	r3, 8003d48 <__sinit+0x14>
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	f7ff bff0 	b.w	8003d28 <__sfp_lock_release>
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__sinit+0x28>)
 8003d4a:	6223      	str	r3, [r4, #32]
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__sinit+0x2c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f5      	bne.n	8003d40 <__sinit+0xc>
 8003d54:	f7ff ffc4 	bl	8003ce0 <global_stdio_init.part.0>
 8003d58:	e7f2      	b.n	8003d40 <__sinit+0xc>
 8003d5a:	bf00      	nop
 8003d5c:	08003ca1 	.word	0x08003ca1
 8003d60:	200002dc 	.word	0x200002dc

08003d64 <_fwalk_sglue>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	2600      	movs	r6, #0
 8003d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d74:	f1b9 0901 	subs.w	r9, r9, #1
 8003d78:	d505      	bpl.n	8003d86 <_fwalk_sglue+0x22>
 8003d7a:	6824      	ldr	r4, [r4, #0]
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d1f7      	bne.n	8003d70 <_fwalk_sglue+0xc>
 8003d80:	4630      	mov	r0, r6
 8003d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d907      	bls.n	8003d9c <_fwalk_sglue+0x38>
 8003d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d003      	beq.n	8003d9c <_fwalk_sglue+0x38>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	4306      	orrs	r6, r0
 8003d9c:	3568      	adds	r5, #104	; 0x68
 8003d9e:	e7e9      	b.n	8003d74 <_fwalk_sglue+0x10>

08003da0 <iprintf>:
 8003da0:	b40f      	push	{r0, r1, r2, r3}
 8003da2:	b507      	push	{r0, r1, r2, lr}
 8003da4:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <iprintf+0x20>)
 8003da6:	ab04      	add	r3, sp, #16
 8003da8:	6808      	ldr	r0, [r1, #0]
 8003daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dae:	6881      	ldr	r1, [r0, #8]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	f000 fad1 	bl	8004358 <_vfiprintf_r>
 8003db6:	b003      	add	sp, #12
 8003db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dbc:	b004      	add	sp, #16
 8003dbe:	4770      	bx	lr
 8003dc0:	2000006c 	.word	0x2000006c

08003dc4 <_puts_r>:
 8003dc4:	6a03      	ldr	r3, [r0, #32]
 8003dc6:	b570      	push	{r4, r5, r6, lr}
 8003dc8:	4605      	mov	r5, r0
 8003dca:	460e      	mov	r6, r1
 8003dcc:	6884      	ldr	r4, [r0, #8]
 8003dce:	b90b      	cbnz	r3, 8003dd4 <_puts_r+0x10>
 8003dd0:	f7ff ffb0 	bl	8003d34 <__sinit>
 8003dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd6:	07db      	lsls	r3, r3, #31
 8003dd8:	d405      	bmi.n	8003de6 <_puts_r+0x22>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	0598      	lsls	r0, r3, #22
 8003dde:	d402      	bmi.n	8003de6 <_puts_r+0x22>
 8003de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de2:	f000 f99b 	bl	800411c <__retarget_lock_acquire_recursive>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	0719      	lsls	r1, r3, #28
 8003dea:	d513      	bpl.n	8003e14 <_puts_r+0x50>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	b18b      	cbz	r3, 8003e14 <_puts_r+0x50>
 8003df0:	3e01      	subs	r6, #1
 8003df2:	68a3      	ldr	r3, [r4, #8]
 8003df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60a3      	str	r3, [r4, #8]
 8003dfc:	b9e9      	cbnz	r1, 8003e3a <_puts_r+0x76>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da2e      	bge.n	8003e60 <_puts_r+0x9c>
 8003e02:	4622      	mov	r2, r4
 8003e04:	210a      	movs	r1, #10
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f87b 	bl	8003f02 <__swbuf_r>
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d007      	beq.n	8003e20 <_puts_r+0x5c>
 8003e10:	250a      	movs	r5, #10
 8003e12:	e007      	b.n	8003e24 <_puts_r+0x60>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 f8b0 	bl	8003f7c <__swsetup_r>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d0e7      	beq.n	8003df0 <_puts_r+0x2c>
 8003e20:	f04f 35ff 	mov.w	r5, #4294967295
 8003e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e26:	07da      	lsls	r2, r3, #31
 8003e28:	d405      	bmi.n	8003e36 <_puts_r+0x72>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	059b      	lsls	r3, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_puts_r+0x72>
 8003e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e32:	f000 f974 	bl	800411e <__retarget_lock_release_recursive>
 8003e36:	4628      	mov	r0, r5
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da04      	bge.n	8003e48 <_puts_r+0x84>
 8003e3e:	69a2      	ldr	r2, [r4, #24]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dc06      	bgt.n	8003e52 <_puts_r+0x8e>
 8003e44:	290a      	cmp	r1, #10
 8003e46:	d004      	beq.n	8003e52 <_puts_r+0x8e>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	6022      	str	r2, [r4, #0]
 8003e4e:	7019      	strb	r1, [r3, #0]
 8003e50:	e7cf      	b.n	8003df2 <_puts_r+0x2e>
 8003e52:	4622      	mov	r2, r4
 8003e54:	4628      	mov	r0, r5
 8003e56:	f000 f854 	bl	8003f02 <__swbuf_r>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d1c9      	bne.n	8003df2 <_puts_r+0x2e>
 8003e5e:	e7df      	b.n	8003e20 <_puts_r+0x5c>
 8003e60:	250a      	movs	r5, #10
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	6022      	str	r2, [r4, #0]
 8003e68:	701d      	strb	r5, [r3, #0]
 8003e6a:	e7db      	b.n	8003e24 <_puts_r+0x60>

08003e6c <puts>:
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <puts+0xc>)
 8003e6e:	4601      	mov	r1, r0
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	f7ff bfa7 	b.w	8003dc4 <_puts_r>
 8003e76:	bf00      	nop
 8003e78:	2000006c 	.word	0x2000006c

08003e7c <__sread>:
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 f8fc 	bl	8004080 <_read_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	bfab      	itete	ge
 8003e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e90:	181b      	addge	r3, r3, r0
 8003e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e96:	bfac      	ite	ge
 8003e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9a:	81a3      	strhlt	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__swrite>:
 8003e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	898b      	ldrh	r3, [r1, #12]
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	05db      	lsls	r3, r3, #23
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4616      	mov	r6, r2
 8003eae:	d505      	bpl.n	8003ebc <__swrite+0x1e>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	f000 f8d0 	bl	800405c <_lseek_r>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	463b      	mov	r3, r7
 8003eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	f000 b8e7 	b.w	80040a4 <_write_r>

08003ed6 <__sseek>:
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	460c      	mov	r4, r1
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	f000 f8bd 	bl	800405c <_lseek_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	bf15      	itete	ne
 8003ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef2:	81a3      	strheq	r3, [r4, #12]
 8003ef4:	bf18      	it	ne
 8003ef6:	81a3      	strhne	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__sclose>:
 8003efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efe:	f000 b89d 	b.w	800403c <_close_r>

08003f02 <__swbuf_r>:
 8003f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f04:	460e      	mov	r6, r1
 8003f06:	4614      	mov	r4, r2
 8003f08:	4605      	mov	r5, r0
 8003f0a:	b118      	cbz	r0, 8003f14 <__swbuf_r+0x12>
 8003f0c:	6a03      	ldr	r3, [r0, #32]
 8003f0e:	b90b      	cbnz	r3, 8003f14 <__swbuf_r+0x12>
 8003f10:	f7ff ff10 	bl	8003d34 <__sinit>
 8003f14:	69a3      	ldr	r3, [r4, #24]
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	071a      	lsls	r2, r3, #28
 8003f1c:	d525      	bpl.n	8003f6a <__swbuf_r+0x68>
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	b31b      	cbz	r3, 8003f6a <__swbuf_r+0x68>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6922      	ldr	r2, [r4, #16]
 8003f26:	b2f6      	uxtb	r6, r6
 8003f28:	1a98      	subs	r0, r3, r2
 8003f2a:	6963      	ldr	r3, [r4, #20]
 8003f2c:	4637      	mov	r7, r6
 8003f2e:	4283      	cmp	r3, r0
 8003f30:	dc04      	bgt.n	8003f3c <__swbuf_r+0x3a>
 8003f32:	4621      	mov	r1, r4
 8003f34:	4628      	mov	r0, r5
 8003f36:	f000 fd3f 	bl	80049b8 <_fflush_r>
 8003f3a:	b9e0      	cbnz	r0, 8003f76 <__swbuf_r+0x74>
 8003f3c:	68a3      	ldr	r3, [r4, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60a3      	str	r3, [r4, #8]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	6022      	str	r2, [r4, #0]
 8003f48:	701e      	strb	r6, [r3, #0]
 8003f4a:	6962      	ldr	r2, [r4, #20]
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d004      	beq.n	8003f5c <__swbuf_r+0x5a>
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	07db      	lsls	r3, r3, #31
 8003f56:	d506      	bpl.n	8003f66 <__swbuf_r+0x64>
 8003f58:	2e0a      	cmp	r6, #10
 8003f5a:	d104      	bne.n	8003f66 <__swbuf_r+0x64>
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f000 fd2a 	bl	80049b8 <_fflush_r>
 8003f64:	b938      	cbnz	r0, 8003f76 <__swbuf_r+0x74>
 8003f66:	4638      	mov	r0, r7
 8003f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f805 	bl	8003f7c <__swsetup_r>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d0d5      	beq.n	8003f22 <__swbuf_r+0x20>
 8003f76:	f04f 37ff 	mov.w	r7, #4294967295
 8003f7a:	e7f4      	b.n	8003f66 <__swbuf_r+0x64>

08003f7c <__swsetup_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <__swsetup_r+0xac>)
 8003f80:	4605      	mov	r5, r0
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	460c      	mov	r4, r1
 8003f86:	b118      	cbz	r0, 8003f90 <__swsetup_r+0x14>
 8003f88:	6a03      	ldr	r3, [r0, #32]
 8003f8a:	b90b      	cbnz	r3, 8003f90 <__swsetup_r+0x14>
 8003f8c:	f7ff fed2 	bl	8003d34 <__sinit>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f96:	0718      	lsls	r0, r3, #28
 8003f98:	d422      	bmi.n	8003fe0 <__swsetup_r+0x64>
 8003f9a:	06d9      	lsls	r1, r3, #27
 8003f9c:	d407      	bmi.n	8003fae <__swsetup_r+0x32>
 8003f9e:	2309      	movs	r3, #9
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	e034      	b.n	8004018 <__swsetup_r+0x9c>
 8003fae:	0758      	lsls	r0, r3, #29
 8003fb0:	d512      	bpl.n	8003fd8 <__swsetup_r+0x5c>
 8003fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb4:	b141      	cbz	r1, 8003fc8 <__swsetup_r+0x4c>
 8003fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fba:	4299      	cmp	r1, r3
 8003fbc:	d002      	beq.n	8003fc4 <__swsetup_r+0x48>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f8ae 	bl	8004120 <_free_r>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6363      	str	r3, [r4, #52]	; 0x34
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fce:	81a3      	strh	r3, [r4, #12]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0308 	orr.w	r3, r3, #8
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	b94b      	cbnz	r3, 8003ff8 <__swsetup_r+0x7c>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fee:	d003      	beq.n	8003ff8 <__swsetup_r+0x7c>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fd2d 	bl	8004a52 <__smakebuf_r>
 8003ff8:	89a0      	ldrh	r0, [r4, #12]
 8003ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ffe:	f010 0301 	ands.w	r3, r0, #1
 8004002:	d00a      	beq.n	800401a <__swsetup_r+0x9e>
 8004004:	2300      	movs	r3, #0
 8004006:	60a3      	str	r3, [r4, #8]
 8004008:	6963      	ldr	r3, [r4, #20]
 800400a:	425b      	negs	r3, r3
 800400c:	61a3      	str	r3, [r4, #24]
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	b943      	cbnz	r3, 8004024 <__swsetup_r+0xa8>
 8004012:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004016:	d1c4      	bne.n	8003fa2 <__swsetup_r+0x26>
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	0781      	lsls	r1, r0, #30
 800401c:	bf58      	it	pl
 800401e:	6963      	ldrpl	r3, [r4, #20]
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	e7f4      	b.n	800400e <__swsetup_r+0x92>
 8004024:	2000      	movs	r0, #0
 8004026:	e7f7      	b.n	8004018 <__swsetup_r+0x9c>
 8004028:	2000006c 	.word	0x2000006c

0800402c <memset>:
 800402c:	4603      	mov	r3, r0
 800402e:	4402      	add	r2, r0
 8004030:	4293      	cmp	r3, r2
 8004032:	d100      	bne.n	8004036 <memset+0xa>
 8004034:	4770      	bx	lr
 8004036:	f803 1b01 	strb.w	r1, [r3], #1
 800403a:	e7f9      	b.n	8004030 <memset+0x4>

0800403c <_close_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	2300      	movs	r3, #0
 8004040:	4d05      	ldr	r5, [pc, #20]	; (8004058 <_close_r+0x1c>)
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc fc0d 	bl	8000866 <_close>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_close_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_close_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200002e0 	.word	0x200002e0

0800405c <_lseek_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	2200      	movs	r2, #0
 8004066:	4d05      	ldr	r5, [pc, #20]	; (800407c <_lseek_r+0x20>)
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fc fc1f 	bl	80008ae <_lseek>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_lseek_r+0x1e>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_lseek_r+0x1e>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200002e0 	.word	0x200002e0

08004080 <_read_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	2200      	movs	r2, #0
 800408a:	4d05      	ldr	r5, [pc, #20]	; (80040a0 <_read_r+0x20>)
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fc fbcc 	bl	800082c <_read>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_read_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_read_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200002e0 	.word	0x200002e0

080040a4 <_write_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	4d05      	ldr	r5, [pc, #20]	; (80040c4 <_write_r+0x20>)
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc fd34 	bl	8000b20 <_write>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_write_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_write_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	200002e0 	.word	0x200002e0

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000006c 	.word	0x2000006c

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	2600      	movs	r6, #0
 80040d8:	4d0c      	ldr	r5, [pc, #48]	; (800410c <__libc_init_array+0x38>)
 80040da:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	42a6      	cmp	r6, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	f000 fd32 	bl	8004b4c <_init>
 80040e8:	2600      	movs	r6, #0
 80040ea:	4d0a      	ldr	r5, [pc, #40]	; (8004114 <__libc_init_array+0x40>)
 80040ec:	4c0a      	ldr	r4, [pc, #40]	; (8004118 <__libc_init_array+0x44>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	42a6      	cmp	r6, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fc:	4798      	blx	r3
 80040fe:	3601      	adds	r6, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f855 3b04 	ldr.w	r3, [r5], #4
 8004106:	4798      	blx	r3
 8004108:	3601      	adds	r6, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004bfc 	.word	0x08004bfc
 8004110:	08004bfc 	.word	0x08004bfc
 8004114:	08004bfc 	.word	0x08004bfc
 8004118:	08004c00 	.word	0x08004c00

0800411c <__retarget_lock_acquire_recursive>:
 800411c:	4770      	bx	lr

0800411e <__retarget_lock_release_recursive>:
 800411e:	4770      	bx	lr

08004120 <_free_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	2900      	cmp	r1, #0
 8004126:	d040      	beq.n	80041aa <_free_r+0x8a>
 8004128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412c:	1f0c      	subs	r4, r1, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb8      	it	lt
 8004132:	18e4      	addlt	r4, r4, r3
 8004134:	f000 f8dc 	bl	80042f0 <__malloc_lock>
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <_free_r+0x8c>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	b933      	cbnz	r3, 800414c <_free_r+0x2c>
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6014      	str	r4, [r2, #0]
 8004142:	4628      	mov	r0, r5
 8004144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004148:	f000 b8d8 	b.w	80042fc <__malloc_unlock>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d908      	bls.n	8004162 <_free_r+0x42>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	1821      	adds	r1, r4, r0
 8004154:	428b      	cmp	r3, r1
 8004156:	bf01      	itttt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	e7ed      	b.n	800413e <_free_r+0x1e>
 8004162:	461a      	mov	r2, r3
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b10b      	cbz	r3, 800416c <_free_r+0x4c>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d9fa      	bls.n	8004162 <_free_r+0x42>
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	1850      	adds	r0, r2, r1
 8004170:	42a0      	cmp	r0, r4
 8004172:	d10b      	bne.n	800418c <_free_r+0x6c>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	4401      	add	r1, r0
 8004178:	1850      	adds	r0, r2, r1
 800417a:	4283      	cmp	r3, r0
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	d1e0      	bne.n	8004142 <_free_r+0x22>
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4408      	add	r0, r1
 8004186:	6010      	str	r0, [r2, #0]
 8004188:	6053      	str	r3, [r2, #4]
 800418a:	e7da      	b.n	8004142 <_free_r+0x22>
 800418c:	d902      	bls.n	8004194 <_free_r+0x74>
 800418e:	230c      	movs	r3, #12
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	e7d6      	b.n	8004142 <_free_r+0x22>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	1821      	adds	r1, r4, r0
 8004198:	428b      	cmp	r3, r1
 800419a:	bf01      	itttt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	1809      	addeq	r1, r1, r0
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	6054      	str	r4, [r2, #4]
 80041a8:	e7cb      	b.n	8004142 <_free_r+0x22>
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	200002e8 	.word	0x200002e8

080041b0 <sbrk_aligned>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0e      	ldr	r6, [pc, #56]	; (80041ec <sbrk_aligned+0x3c>)
 80041b4:	460c      	mov	r4, r1
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	4605      	mov	r5, r0
 80041ba:	b911      	cbnz	r1, 80041c2 <sbrk_aligned+0x12>
 80041bc:	f000 fca8 	bl	8004b10 <_sbrk_r>
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fca3 	bl	8004b10 <_sbrk_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d00a      	beq.n	80041e4 <sbrk_aligned+0x34>
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d007      	beq.n	80041e8 <sbrk_aligned+0x38>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 fc98 	bl	8004b10 <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d101      	bne.n	80041e8 <sbrk_aligned+0x38>
 80041e4:	f04f 34ff 	mov.w	r4, #4294967295
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	200002ec 	.word	0x200002ec

080041f0 <_malloc_r>:
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	1ccd      	adds	r5, r1, #3
 80041f6:	f025 0503 	bic.w	r5, r5, #3
 80041fa:	3508      	adds	r5, #8
 80041fc:	2d0c      	cmp	r5, #12
 80041fe:	bf38      	it	cc
 8004200:	250c      	movcc	r5, #12
 8004202:	2d00      	cmp	r5, #0
 8004204:	4607      	mov	r7, r0
 8004206:	db01      	blt.n	800420c <_malloc_r+0x1c>
 8004208:	42a9      	cmp	r1, r5
 800420a:	d905      	bls.n	8004218 <_malloc_r+0x28>
 800420c:	230c      	movs	r3, #12
 800420e:	2600      	movs	r6, #0
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4630      	mov	r0, r6
 8004214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042ec <_malloc_r+0xfc>
 800421c:	f000 f868 	bl	80042f0 <__malloc_lock>
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	461c      	mov	r4, r3
 8004226:	bb5c      	cbnz	r4, 8004280 <_malloc_r+0x90>
 8004228:	4629      	mov	r1, r5
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ffc0 	bl	80041b0 <sbrk_aligned>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	4604      	mov	r4, r0
 8004234:	d155      	bne.n	80042e2 <_malloc_r+0xf2>
 8004236:	f8d8 4000 	ldr.w	r4, [r8]
 800423a:	4626      	mov	r6, r4
 800423c:	2e00      	cmp	r6, #0
 800423e:	d145      	bne.n	80042cc <_malloc_r+0xdc>
 8004240:	2c00      	cmp	r4, #0
 8004242:	d048      	beq.n	80042d6 <_malloc_r+0xe6>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	4631      	mov	r1, r6
 8004248:	4638      	mov	r0, r7
 800424a:	eb04 0903 	add.w	r9, r4, r3
 800424e:	f000 fc5f 	bl	8004b10 <_sbrk_r>
 8004252:	4581      	cmp	r9, r0
 8004254:	d13f      	bne.n	80042d6 <_malloc_r+0xe6>
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	4638      	mov	r0, r7
 800425a:	1a6d      	subs	r5, r5, r1
 800425c:	4629      	mov	r1, r5
 800425e:	f7ff ffa7 	bl	80041b0 <sbrk_aligned>
 8004262:	3001      	adds	r0, #1
 8004264:	d037      	beq.n	80042d6 <_malloc_r+0xe6>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	442b      	add	r3, r5
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	f8d8 3000 	ldr.w	r3, [r8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d038      	beq.n	80042e6 <_malloc_r+0xf6>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	42a2      	cmp	r2, r4
 8004278:	d12b      	bne.n	80042d2 <_malloc_r+0xe2>
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e00f      	b.n	80042a0 <_malloc_r+0xb0>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	1b52      	subs	r2, r2, r5
 8004284:	d41f      	bmi.n	80042c6 <_malloc_r+0xd6>
 8004286:	2a0b      	cmp	r2, #11
 8004288:	d917      	bls.n	80042ba <_malloc_r+0xca>
 800428a:	1961      	adds	r1, r4, r5
 800428c:	42a3      	cmp	r3, r4
 800428e:	6025      	str	r5, [r4, #0]
 8004290:	bf18      	it	ne
 8004292:	6059      	strne	r1, [r3, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	bf08      	it	eq
 8004298:	f8c8 1000 	streq.w	r1, [r8]
 800429c:	5162      	str	r2, [r4, r5]
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	4638      	mov	r0, r7
 80042a2:	f104 060b 	add.w	r6, r4, #11
 80042a6:	f000 f829 	bl	80042fc <__malloc_unlock>
 80042aa:	f026 0607 	bic.w	r6, r6, #7
 80042ae:	1d23      	adds	r3, r4, #4
 80042b0:	1af2      	subs	r2, r6, r3
 80042b2:	d0ae      	beq.n	8004212 <_malloc_r+0x22>
 80042b4:	1b9b      	subs	r3, r3, r6
 80042b6:	50a3      	str	r3, [r4, r2]
 80042b8:	e7ab      	b.n	8004212 <_malloc_r+0x22>
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	6862      	ldr	r2, [r4, #4]
 80042be:	d1dd      	bne.n	800427c <_malloc_r+0x8c>
 80042c0:	f8c8 2000 	str.w	r2, [r8]
 80042c4:	e7ec      	b.n	80042a0 <_malloc_r+0xb0>
 80042c6:	4623      	mov	r3, r4
 80042c8:	6864      	ldr	r4, [r4, #4]
 80042ca:	e7ac      	b.n	8004226 <_malloc_r+0x36>
 80042cc:	4634      	mov	r4, r6
 80042ce:	6876      	ldr	r6, [r6, #4]
 80042d0:	e7b4      	b.n	800423c <_malloc_r+0x4c>
 80042d2:	4613      	mov	r3, r2
 80042d4:	e7cc      	b.n	8004270 <_malloc_r+0x80>
 80042d6:	230c      	movs	r3, #12
 80042d8:	4638      	mov	r0, r7
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	f000 f80e 	bl	80042fc <__malloc_unlock>
 80042e0:	e797      	b.n	8004212 <_malloc_r+0x22>
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	e7dc      	b.n	80042a0 <_malloc_r+0xb0>
 80042e6:	605b      	str	r3, [r3, #4]
 80042e8:	deff      	udf	#255	; 0xff
 80042ea:	bf00      	nop
 80042ec:	200002e8 	.word	0x200002e8

080042f0 <__malloc_lock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__malloc_lock+0x8>)
 80042f2:	f7ff bf13 	b.w	800411c <__retarget_lock_acquire_recursive>
 80042f6:	bf00      	nop
 80042f8:	200002e4 	.word	0x200002e4

080042fc <__malloc_unlock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__malloc_unlock+0x8>)
 80042fe:	f7ff bf0e 	b.w	800411e <__retarget_lock_release_recursive>
 8004302:	bf00      	nop
 8004304:	200002e4 	.word	0x200002e4

08004308 <__sfputc_r>:
 8004308:	6893      	ldr	r3, [r2, #8]
 800430a:	b410      	push	{r4}
 800430c:	3b01      	subs	r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	6093      	str	r3, [r2, #8]
 8004312:	da07      	bge.n	8004324 <__sfputc_r+0x1c>
 8004314:	6994      	ldr	r4, [r2, #24]
 8004316:	42a3      	cmp	r3, r4
 8004318:	db01      	blt.n	800431e <__sfputc_r+0x16>
 800431a:	290a      	cmp	r1, #10
 800431c:	d102      	bne.n	8004324 <__sfputc_r+0x1c>
 800431e:	bc10      	pop	{r4}
 8004320:	f7ff bdef 	b.w	8003f02 <__swbuf_r>
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	1c58      	adds	r0, r3, #1
 8004328:	6010      	str	r0, [r2, #0]
 800432a:	7019      	strb	r1, [r3, #0]
 800432c:	4608      	mov	r0, r1
 800432e:	bc10      	pop	{r4}
 8004330:	4770      	bx	lr

08004332 <__sfputs_r>:
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	4614      	mov	r4, r2
 800433a:	18d5      	adds	r5, r2, r3
 800433c:	42ac      	cmp	r4, r5
 800433e:	d101      	bne.n	8004344 <__sfputs_r+0x12>
 8004340:	2000      	movs	r0, #0
 8004342:	e007      	b.n	8004354 <__sfputs_r+0x22>
 8004344:	463a      	mov	r2, r7
 8004346:	4630      	mov	r0, r6
 8004348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434c:	f7ff ffdc 	bl	8004308 <__sfputc_r>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d1f3      	bne.n	800433c <__sfputs_r+0xa>
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004358 <_vfiprintf_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	460d      	mov	r5, r1
 800435e:	4614      	mov	r4, r2
 8004360:	4698      	mov	r8, r3
 8004362:	4606      	mov	r6, r0
 8004364:	b09d      	sub	sp, #116	; 0x74
 8004366:	b118      	cbz	r0, 8004370 <_vfiprintf_r+0x18>
 8004368:	6a03      	ldr	r3, [r0, #32]
 800436a:	b90b      	cbnz	r3, 8004370 <_vfiprintf_r+0x18>
 800436c:	f7ff fce2 	bl	8003d34 <__sinit>
 8004370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004372:	07d9      	lsls	r1, r3, #31
 8004374:	d405      	bmi.n	8004382 <_vfiprintf_r+0x2a>
 8004376:	89ab      	ldrh	r3, [r5, #12]
 8004378:	059a      	lsls	r2, r3, #22
 800437a:	d402      	bmi.n	8004382 <_vfiprintf_r+0x2a>
 800437c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437e:	f7ff fecd 	bl	800411c <__retarget_lock_acquire_recursive>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	d501      	bpl.n	800438c <_vfiprintf_r+0x34>
 8004388:	692b      	ldr	r3, [r5, #16]
 800438a:	b99b      	cbnz	r3, 80043b4 <_vfiprintf_r+0x5c>
 800438c:	4629      	mov	r1, r5
 800438e:	4630      	mov	r0, r6
 8004390:	f7ff fdf4 	bl	8003f7c <__swsetup_r>
 8004394:	b170      	cbz	r0, 80043b4 <_vfiprintf_r+0x5c>
 8004396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004398:	07dc      	lsls	r4, r3, #31
 800439a:	d504      	bpl.n	80043a6 <_vfiprintf_r+0x4e>
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	b01d      	add	sp, #116	; 0x74
 80043a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	0598      	lsls	r0, r3, #22
 80043aa:	d4f7      	bmi.n	800439c <_vfiprintf_r+0x44>
 80043ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ae:	f7ff feb6 	bl	800411e <__retarget_lock_release_recursive>
 80043b2:	e7f3      	b.n	800439c <_vfiprintf_r+0x44>
 80043b4:	2300      	movs	r3, #0
 80043b6:	9309      	str	r3, [sp, #36]	; 0x24
 80043b8:	2320      	movs	r3, #32
 80043ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043be:	2330      	movs	r3, #48	; 0x30
 80043c0:	f04f 0901 	mov.w	r9, #1
 80043c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004578 <_vfiprintf_r+0x220>
 80043cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043d0:	4623      	mov	r3, r4
 80043d2:	469a      	mov	sl, r3
 80043d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d8:	b10a      	cbz	r2, 80043de <_vfiprintf_r+0x86>
 80043da:	2a25      	cmp	r2, #37	; 0x25
 80043dc:	d1f9      	bne.n	80043d2 <_vfiprintf_r+0x7a>
 80043de:	ebba 0b04 	subs.w	fp, sl, r4
 80043e2:	d00b      	beq.n	80043fc <_vfiprintf_r+0xa4>
 80043e4:	465b      	mov	r3, fp
 80043e6:	4622      	mov	r2, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff ffa1 	bl	8004332 <__sfputs_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	f000 80a9 	beq.w	8004548 <_vfiprintf_r+0x1f0>
 80043f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f8:	445a      	add	r2, fp
 80043fa:	9209      	str	r2, [sp, #36]	; 0x24
 80043fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80a1 	beq.w	8004548 <_vfiprintf_r+0x1f0>
 8004406:	2300      	movs	r3, #0
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004410:	f10a 0a01 	add.w	sl, sl, #1
 8004414:	9304      	str	r3, [sp, #16]
 8004416:	9307      	str	r3, [sp, #28]
 8004418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800441c:	931a      	str	r3, [sp, #104]	; 0x68
 800441e:	4654      	mov	r4, sl
 8004420:	2205      	movs	r2, #5
 8004422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004426:	4854      	ldr	r0, [pc, #336]	; (8004578 <_vfiprintf_r+0x220>)
 8004428:	f000 fb82 	bl	8004b30 <memchr>
 800442c:	9a04      	ldr	r2, [sp, #16]
 800442e:	b9d8      	cbnz	r0, 8004468 <_vfiprintf_r+0x110>
 8004430:	06d1      	lsls	r1, r2, #27
 8004432:	bf44      	itt	mi
 8004434:	2320      	movmi	r3, #32
 8004436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800443a:	0713      	lsls	r3, r2, #28
 800443c:	bf44      	itt	mi
 800443e:	232b      	movmi	r3, #43	; 0x2b
 8004440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004444:	f89a 3000 	ldrb.w	r3, [sl]
 8004448:	2b2a      	cmp	r3, #42	; 0x2a
 800444a:	d015      	beq.n	8004478 <_vfiprintf_r+0x120>
 800444c:	4654      	mov	r4, sl
 800444e:	2000      	movs	r0, #0
 8004450:	f04f 0c0a 	mov.w	ip, #10
 8004454:	9a07      	ldr	r2, [sp, #28]
 8004456:	4621      	mov	r1, r4
 8004458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445c:	3b30      	subs	r3, #48	; 0x30
 800445e:	2b09      	cmp	r3, #9
 8004460:	d94d      	bls.n	80044fe <_vfiprintf_r+0x1a6>
 8004462:	b1b0      	cbz	r0, 8004492 <_vfiprintf_r+0x13a>
 8004464:	9207      	str	r2, [sp, #28]
 8004466:	e014      	b.n	8004492 <_vfiprintf_r+0x13a>
 8004468:	eba0 0308 	sub.w	r3, r0, r8
 800446c:	fa09 f303 	lsl.w	r3, r9, r3
 8004470:	4313      	orrs	r3, r2
 8004472:	46a2      	mov	sl, r4
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	e7d2      	b.n	800441e <_vfiprintf_r+0xc6>
 8004478:	9b03      	ldr	r3, [sp, #12]
 800447a:	1d19      	adds	r1, r3, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	9103      	str	r1, [sp, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfbb      	ittet	lt
 8004484:	425b      	neglt	r3, r3
 8004486:	f042 0202 	orrlt.w	r2, r2, #2
 800448a:	9307      	strge	r3, [sp, #28]
 800448c:	9307      	strlt	r3, [sp, #28]
 800448e:	bfb8      	it	lt
 8004490:	9204      	strlt	r2, [sp, #16]
 8004492:	7823      	ldrb	r3, [r4, #0]
 8004494:	2b2e      	cmp	r3, #46	; 0x2e
 8004496:	d10c      	bne.n	80044b2 <_vfiprintf_r+0x15a>
 8004498:	7863      	ldrb	r3, [r4, #1]
 800449a:	2b2a      	cmp	r3, #42	; 0x2a
 800449c:	d134      	bne.n	8004508 <_vfiprintf_r+0x1b0>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	3402      	adds	r4, #2
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	9203      	str	r2, [sp, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bfb8      	it	lt
 80044ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800457c <_vfiprintf_r+0x224>
 80044b6:	2203      	movs	r2, #3
 80044b8:	4650      	mov	r0, sl
 80044ba:	7821      	ldrb	r1, [r4, #0]
 80044bc:	f000 fb38 	bl	8004b30 <memchr>
 80044c0:	b138      	cbz	r0, 80044d2 <_vfiprintf_r+0x17a>
 80044c2:	2240      	movs	r2, #64	; 0x40
 80044c4:	9b04      	ldr	r3, [sp, #16]
 80044c6:	eba0 000a 	sub.w	r0, r0, sl
 80044ca:	4082      	lsls	r2, r0
 80044cc:	4313      	orrs	r3, r2
 80044ce:	3401      	adds	r4, #1
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d6:	2206      	movs	r2, #6
 80044d8:	4829      	ldr	r0, [pc, #164]	; (8004580 <_vfiprintf_r+0x228>)
 80044da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044de:	f000 fb27 	bl	8004b30 <memchr>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d03f      	beq.n	8004566 <_vfiprintf_r+0x20e>
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <_vfiprintf_r+0x22c>)
 80044e8:	bb1b      	cbnz	r3, 8004532 <_vfiprintf_r+0x1da>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	3307      	adds	r3, #7
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	3308      	adds	r3, #8
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f8:	443b      	add	r3, r7
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	e768      	b.n	80043d0 <_vfiprintf_r+0x78>
 80044fe:	460c      	mov	r4, r1
 8004500:	2001      	movs	r0, #1
 8004502:	fb0c 3202 	mla	r2, ip, r2, r3
 8004506:	e7a6      	b.n	8004456 <_vfiprintf_r+0xfe>
 8004508:	2300      	movs	r3, #0
 800450a:	f04f 0c0a 	mov.w	ip, #10
 800450e:	4619      	mov	r1, r3
 8004510:	3401      	adds	r4, #1
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	4620      	mov	r0, r4
 8004516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800451a:	3a30      	subs	r2, #48	; 0x30
 800451c:	2a09      	cmp	r2, #9
 800451e:	d903      	bls.n	8004528 <_vfiprintf_r+0x1d0>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0c6      	beq.n	80044b2 <_vfiprintf_r+0x15a>
 8004524:	9105      	str	r1, [sp, #20]
 8004526:	e7c4      	b.n	80044b2 <_vfiprintf_r+0x15a>
 8004528:	4604      	mov	r4, r0
 800452a:	2301      	movs	r3, #1
 800452c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004530:	e7f0      	b.n	8004514 <_vfiprintf_r+0x1bc>
 8004532:	ab03      	add	r3, sp, #12
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	462a      	mov	r2, r5
 8004538:	4630      	mov	r0, r6
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <_vfiprintf_r+0x230>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	f3af 8000 	nop.w
 8004542:	4607      	mov	r7, r0
 8004544:	1c78      	adds	r0, r7, #1
 8004546:	d1d6      	bne.n	80044f6 <_vfiprintf_r+0x19e>
 8004548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800454a:	07d9      	lsls	r1, r3, #31
 800454c:	d405      	bmi.n	800455a <_vfiprintf_r+0x202>
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	059a      	lsls	r2, r3, #22
 8004552:	d402      	bmi.n	800455a <_vfiprintf_r+0x202>
 8004554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004556:	f7ff fde2 	bl	800411e <__retarget_lock_release_recursive>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	065b      	lsls	r3, r3, #25
 800455e:	f53f af1d 	bmi.w	800439c <_vfiprintf_r+0x44>
 8004562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004564:	e71c      	b.n	80043a0 <_vfiprintf_r+0x48>
 8004566:	ab03      	add	r3, sp, #12
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	462a      	mov	r2, r5
 800456c:	4630      	mov	r0, r6
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <_vfiprintf_r+0x230>)
 8004570:	a904      	add	r1, sp, #16
 8004572:	f000 f87d 	bl	8004670 <_printf_i>
 8004576:	e7e4      	b.n	8004542 <_vfiprintf_r+0x1ea>
 8004578:	08004bc6 	.word	0x08004bc6
 800457c:	08004bcc 	.word	0x08004bcc
 8004580:	08004bd0 	.word	0x08004bd0
 8004584:	00000000 	.word	0x00000000
 8004588:	08004333 	.word	0x08004333

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4616      	mov	r6, r2
 8004592:	4699      	mov	r9, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	4607      	mov	r7, r0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfb8      	it	lt
 800459e:	4613      	movlt	r3, r2
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a6:	460c      	mov	r4, r1
 80045a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ac:	b10a      	cbz	r2, 80045b2 <_printf_common+0x26>
 80045ae:	3301      	adds	r3, #1
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	0699      	lsls	r1, r3, #26
 80045b6:	bf42      	ittt	mi
 80045b8:	6833      	ldrmi	r3, [r6, #0]
 80045ba:	3302      	addmi	r3, #2
 80045bc:	6033      	strmi	r3, [r6, #0]
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	f015 0506 	ands.w	r5, r5, #6
 80045c4:	d106      	bne.n	80045d4 <_printf_common+0x48>
 80045c6:	f104 0a19 	add.w	sl, r4, #25
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	6832      	ldr	r2, [r6, #0]
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dc2b      	bgt.n	800462c <_printf_common+0xa0>
 80045d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d8:	1e13      	subs	r3, r2, #0
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	bf18      	it	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	0692      	lsls	r2, r2, #26
 80045e2:	d430      	bmi.n	8004646 <_printf_common+0xba>
 80045e4:	4649      	mov	r1, r9
 80045e6:	4638      	mov	r0, r7
 80045e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d023      	beq.n	800463a <_printf_common+0xae>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	f003 0306 	and.w	r3, r3, #6
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf14      	ite	ne
 80045fe:	2500      	movne	r5, #0
 8004600:	6833      	ldreq	r3, [r6, #0]
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	bf08      	it	eq
 8004608:	68e5      	ldreq	r5, [r4, #12]
 800460a:	f104 041a 	add.w	r4, r4, #26
 800460e:	bf08      	it	eq
 8004610:	1aed      	subeq	r5, r5, r3
 8004612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004616:	bf08      	it	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	4293      	cmp	r3, r2
 800461e:	bfc4      	itt	gt
 8004620:	1a9b      	subgt	r3, r3, r2
 8004622:	18ed      	addgt	r5, r5, r3
 8004624:	42b5      	cmp	r5, r6
 8004626:	d11a      	bne.n	800465e <_printf_common+0xd2>
 8004628:	2000      	movs	r0, #0
 800462a:	e008      	b.n	800463e <_printf_common+0xb2>
 800462c:	2301      	movs	r3, #1
 800462e:	4652      	mov	r2, sl
 8004630:	4649      	mov	r1, r9
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d103      	bne.n	8004642 <_printf_common+0xb6>
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004642:	3501      	adds	r5, #1
 8004644:	e7c1      	b.n	80045ca <_printf_common+0x3e>
 8004646:	2030      	movs	r0, #48	; 0x30
 8004648:	18e1      	adds	r1, r4, r3
 800464a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004654:	4422      	add	r2, r4
 8004656:	3302      	adds	r3, #2
 8004658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800465c:	e7c2      	b.n	80045e4 <_printf_common+0x58>
 800465e:	2301      	movs	r3, #1
 8004660:	4622      	mov	r2, r4
 8004662:	4649      	mov	r1, r9
 8004664:	4638      	mov	r0, r7
 8004666:	47c0      	blx	r8
 8004668:	3001      	adds	r0, #1
 800466a:	d0e6      	beq.n	800463a <_printf_common+0xae>
 800466c:	3601      	adds	r6, #1
 800466e:	e7d9      	b.n	8004624 <_printf_common+0x98>

08004670 <_printf_i>:
 8004670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	7e0f      	ldrb	r7, [r1, #24]
 8004676:	4691      	mov	r9, r2
 8004678:	2f78      	cmp	r7, #120	; 0x78
 800467a:	4680      	mov	r8, r0
 800467c:	460c      	mov	r4, r1
 800467e:	469a      	mov	sl, r3
 8004680:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004686:	d807      	bhi.n	8004698 <_printf_i+0x28>
 8004688:	2f62      	cmp	r7, #98	; 0x62
 800468a:	d80a      	bhi.n	80046a2 <_printf_i+0x32>
 800468c:	2f00      	cmp	r7, #0
 800468e:	f000 80d5 	beq.w	800483c <_printf_i+0x1cc>
 8004692:	2f58      	cmp	r7, #88	; 0x58
 8004694:	f000 80c1 	beq.w	800481a <_printf_i+0x1aa>
 8004698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800469c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a0:	e03a      	b.n	8004718 <_printf_i+0xa8>
 80046a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046a6:	2b15      	cmp	r3, #21
 80046a8:	d8f6      	bhi.n	8004698 <_printf_i+0x28>
 80046aa:	a101      	add	r1, pc, #4	; (adr r1, 80046b0 <_printf_i+0x40>)
 80046ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b0:	08004709 	.word	0x08004709
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	08004699 	.word	0x08004699
 80046bc:	08004699 	.word	0x08004699
 80046c0:	08004699 	.word	0x08004699
 80046c4:	08004699 	.word	0x08004699
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	08004699 	.word	0x08004699
 80046d0:	08004699 	.word	0x08004699
 80046d4:	08004699 	.word	0x08004699
 80046d8:	08004699 	.word	0x08004699
 80046dc:	08004823 	.word	0x08004823
 80046e0:	08004749 	.word	0x08004749
 80046e4:	080047dd 	.word	0x080047dd
 80046e8:	08004699 	.word	0x08004699
 80046ec:	08004699 	.word	0x08004699
 80046f0:	08004845 	.word	0x08004845
 80046f4:	08004699 	.word	0x08004699
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004699 	.word	0x08004699
 8004700:	08004699 	.word	0x08004699
 8004704:	080047e5 	.word	0x080047e5
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	602a      	str	r2, [r5, #0]
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004718:	2301      	movs	r3, #1
 800471a:	e0a0      	b.n	800485e <_printf_i+0x1ee>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	0607      	lsls	r7, r0, #24
 8004722:	f103 0104 	add.w	r1, r3, #4
 8004726:	6029      	str	r1, [r5, #0]
 8004728:	d501      	bpl.n	800472e <_printf_i+0xbe>
 800472a:	681e      	ldr	r6, [r3, #0]
 800472c:	e003      	b.n	8004736 <_printf_i+0xc6>
 800472e:	0646      	lsls	r6, r0, #25
 8004730:	d5fb      	bpl.n	800472a <_printf_i+0xba>
 8004732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004736:	2e00      	cmp	r6, #0
 8004738:	da03      	bge.n	8004742 <_printf_i+0xd2>
 800473a:	232d      	movs	r3, #45	; 0x2d
 800473c:	4276      	negs	r6, r6
 800473e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004742:	230a      	movs	r3, #10
 8004744:	4859      	ldr	r0, [pc, #356]	; (80048ac <_printf_i+0x23c>)
 8004746:	e012      	b.n	800476e <_printf_i+0xfe>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	6029      	str	r1, [r5, #0]
 8004750:	0605      	lsls	r5, r0, #24
 8004752:	d501      	bpl.n	8004758 <_printf_i+0xe8>
 8004754:	681e      	ldr	r6, [r3, #0]
 8004756:	e002      	b.n	800475e <_printf_i+0xee>
 8004758:	0641      	lsls	r1, r0, #25
 800475a:	d5fb      	bpl.n	8004754 <_printf_i+0xe4>
 800475c:	881e      	ldrh	r6, [r3, #0]
 800475e:	2f6f      	cmp	r7, #111	; 0x6f
 8004760:	bf0c      	ite	eq
 8004762:	2308      	moveq	r3, #8
 8004764:	230a      	movne	r3, #10
 8004766:	4851      	ldr	r0, [pc, #324]	; (80048ac <_printf_i+0x23c>)
 8004768:	2100      	movs	r1, #0
 800476a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800476e:	6865      	ldr	r5, [r4, #4]
 8004770:	2d00      	cmp	r5, #0
 8004772:	bfa8      	it	ge
 8004774:	6821      	ldrge	r1, [r4, #0]
 8004776:	60a5      	str	r5, [r4, #8]
 8004778:	bfa4      	itt	ge
 800477a:	f021 0104 	bicge.w	r1, r1, #4
 800477e:	6021      	strge	r1, [r4, #0]
 8004780:	b90e      	cbnz	r6, 8004786 <_printf_i+0x116>
 8004782:	2d00      	cmp	r5, #0
 8004784:	d04b      	beq.n	800481e <_printf_i+0x1ae>
 8004786:	4615      	mov	r5, r2
 8004788:	fbb6 f1f3 	udiv	r1, r6, r3
 800478c:	fb03 6711 	mls	r7, r3, r1, r6
 8004790:	5dc7      	ldrb	r7, [r0, r7]
 8004792:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004796:	4637      	mov	r7, r6
 8004798:	42bb      	cmp	r3, r7
 800479a:	460e      	mov	r6, r1
 800479c:	d9f4      	bls.n	8004788 <_printf_i+0x118>
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d10b      	bne.n	80047ba <_printf_i+0x14a>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	07de      	lsls	r6, r3, #31
 80047a6:	d508      	bpl.n	80047ba <_printf_i+0x14a>
 80047a8:	6923      	ldr	r3, [r4, #16]
 80047aa:	6861      	ldr	r1, [r4, #4]
 80047ac:	4299      	cmp	r1, r3
 80047ae:	bfde      	ittt	le
 80047b0:	2330      	movle	r3, #48	; 0x30
 80047b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	6122      	str	r2, [r4, #16]
 80047be:	464b      	mov	r3, r9
 80047c0:	4621      	mov	r1, r4
 80047c2:	4640      	mov	r0, r8
 80047c4:	f8cd a000 	str.w	sl, [sp]
 80047c8:	aa03      	add	r2, sp, #12
 80047ca:	f7ff fedf 	bl	800458c <_printf_common>
 80047ce:	3001      	adds	r0, #1
 80047d0:	d14a      	bne.n	8004868 <_printf_i+0x1f8>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	b004      	add	sp, #16
 80047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f043 0320 	orr.w	r3, r3, #32
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2778      	movs	r7, #120	; 0x78
 80047e6:	4832      	ldr	r0, [pc, #200]	; (80048b0 <_printf_i+0x240>)
 80047e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	6829      	ldr	r1, [r5, #0]
 80047f0:	061f      	lsls	r7, r3, #24
 80047f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f6:	d402      	bmi.n	80047fe <_printf_i+0x18e>
 80047f8:	065f      	lsls	r7, r3, #25
 80047fa:	bf48      	it	mi
 80047fc:	b2b6      	uxthmi	r6, r6
 80047fe:	07df      	lsls	r7, r3, #31
 8004800:	bf48      	it	mi
 8004802:	f043 0320 	orrmi.w	r3, r3, #32
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	bf48      	it	mi
 800480a:	6023      	strmi	r3, [r4, #0]
 800480c:	b91e      	cbnz	r6, 8004816 <_printf_i+0x1a6>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	f023 0320 	bic.w	r3, r3, #32
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	2310      	movs	r3, #16
 8004818:	e7a6      	b.n	8004768 <_printf_i+0xf8>
 800481a:	4824      	ldr	r0, [pc, #144]	; (80048ac <_printf_i+0x23c>)
 800481c:	e7e4      	b.n	80047e8 <_printf_i+0x178>
 800481e:	4615      	mov	r5, r2
 8004820:	e7bd      	b.n	800479e <_printf_i+0x12e>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	6826      	ldr	r6, [r4, #0]
 8004826:	1d18      	adds	r0, r3, #4
 8004828:	6961      	ldr	r1, [r4, #20]
 800482a:	6028      	str	r0, [r5, #0]
 800482c:	0635      	lsls	r5, r6, #24
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	d501      	bpl.n	8004836 <_printf_i+0x1c6>
 8004832:	6019      	str	r1, [r3, #0]
 8004834:	e002      	b.n	800483c <_printf_i+0x1cc>
 8004836:	0670      	lsls	r0, r6, #25
 8004838:	d5fb      	bpl.n	8004832 <_printf_i+0x1c2>
 800483a:	8019      	strh	r1, [r3, #0]
 800483c:	2300      	movs	r3, #0
 800483e:	4615      	mov	r5, r2
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	e7bc      	b.n	80047be <_printf_i+0x14e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2100      	movs	r1, #0
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f96d 	bl	8004b30 <memchr>
 8004856:	b108      	cbz	r0, 800485c <_printf_i+0x1ec>
 8004858:	1b40      	subs	r0, r0, r5
 800485a:	6060      	str	r0, [r4, #4]
 800485c:	6863      	ldr	r3, [r4, #4]
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	2300      	movs	r3, #0
 8004862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004866:	e7aa      	b.n	80047be <_printf_i+0x14e>
 8004868:	462a      	mov	r2, r5
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	47d0      	blx	sl
 8004872:	3001      	adds	r0, #1
 8004874:	d0ad      	beq.n	80047d2 <_printf_i+0x162>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079b      	lsls	r3, r3, #30
 800487a:	d413      	bmi.n	80048a4 <_printf_i+0x234>
 800487c:	68e0      	ldr	r0, [r4, #12]
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	4298      	cmp	r0, r3
 8004882:	bfb8      	it	lt
 8004884:	4618      	movlt	r0, r3
 8004886:	e7a6      	b.n	80047d6 <_printf_i+0x166>
 8004888:	2301      	movs	r3, #1
 800488a:	4632      	mov	r2, r6
 800488c:	4649      	mov	r1, r9
 800488e:	4640      	mov	r0, r8
 8004890:	47d0      	blx	sl
 8004892:	3001      	adds	r0, #1
 8004894:	d09d      	beq.n	80047d2 <_printf_i+0x162>
 8004896:	3501      	adds	r5, #1
 8004898:	68e3      	ldr	r3, [r4, #12]
 800489a:	9903      	ldr	r1, [sp, #12]
 800489c:	1a5b      	subs	r3, r3, r1
 800489e:	42ab      	cmp	r3, r5
 80048a0:	dcf2      	bgt.n	8004888 <_printf_i+0x218>
 80048a2:	e7eb      	b.n	800487c <_printf_i+0x20c>
 80048a4:	2500      	movs	r5, #0
 80048a6:	f104 0619 	add.w	r6, r4, #25
 80048aa:	e7f5      	b.n	8004898 <_printf_i+0x228>
 80048ac:	08004bd7 	.word	0x08004bd7
 80048b0:	08004be8 	.word	0x08004be8

080048b4 <__sflush_r>:
 80048b4:	898a      	ldrh	r2, [r1, #12]
 80048b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b8:	4605      	mov	r5, r0
 80048ba:	0710      	lsls	r0, r2, #28
 80048bc:	460c      	mov	r4, r1
 80048be:	d457      	bmi.n	8004970 <__sflush_r+0xbc>
 80048c0:	684b      	ldr	r3, [r1, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	dc04      	bgt.n	80048d0 <__sflush_r+0x1c>
 80048c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc01      	bgt.n	80048d0 <__sflush_r+0x1c>
 80048cc:	2000      	movs	r0, #0
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d0fa      	beq.n	80048cc <__sflush_r+0x18>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048dc:	682f      	ldr	r7, [r5, #0]
 80048de:	6a21      	ldr	r1, [r4, #32]
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	d032      	beq.n	800494a <__sflush_r+0x96>
 80048e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	075a      	lsls	r2, r3, #29
 80048ea:	d505      	bpl.n	80048f8 <__sflush_r+0x44>
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	1ac0      	subs	r0, r0, r3
 80048f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f2:	b10b      	cbz	r3, 80048f8 <__sflush_r+0x44>
 80048f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f6:	1ac0      	subs	r0, r0, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	4602      	mov	r2, r0
 80048fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fe:	4628      	mov	r0, r5
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	47b0      	blx	r6
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	d106      	bne.n	8004918 <__sflush_r+0x64>
 800490a:	6829      	ldr	r1, [r5, #0]
 800490c:	291d      	cmp	r1, #29
 800490e:	d82b      	bhi.n	8004968 <__sflush_r+0xb4>
 8004910:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <__sflush_r+0x100>)
 8004912:	410a      	asrs	r2, r1
 8004914:	07d6      	lsls	r6, r2, #31
 8004916:	d427      	bmi.n	8004968 <__sflush_r+0xb4>
 8004918:	2200      	movs	r2, #0
 800491a:	6062      	str	r2, [r4, #4]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	d504      	bpl.n	800492e <__sflush_r+0x7a>
 8004924:	1c42      	adds	r2, r0, #1
 8004926:	d101      	bne.n	800492c <__sflush_r+0x78>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b903      	cbnz	r3, 800492e <__sflush_r+0x7a>
 800492c:	6560      	str	r0, [r4, #84]	; 0x54
 800492e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004930:	602f      	str	r7, [r5, #0]
 8004932:	2900      	cmp	r1, #0
 8004934:	d0ca      	beq.n	80048cc <__sflush_r+0x18>
 8004936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800493a:	4299      	cmp	r1, r3
 800493c:	d002      	beq.n	8004944 <__sflush_r+0x90>
 800493e:	4628      	mov	r0, r5
 8004940:	f7ff fbee 	bl	8004120 <_free_r>
 8004944:	2000      	movs	r0, #0
 8004946:	6360      	str	r0, [r4, #52]	; 0x34
 8004948:	e7c1      	b.n	80048ce <__sflush_r+0x1a>
 800494a:	2301      	movs	r3, #1
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	1c41      	adds	r1, r0, #1
 8004952:	d1c8      	bne.n	80048e6 <__sflush_r+0x32>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c5      	beq.n	80048e6 <__sflush_r+0x32>
 800495a:	2b1d      	cmp	r3, #29
 800495c:	d001      	beq.n	8004962 <__sflush_r+0xae>
 800495e:	2b16      	cmp	r3, #22
 8004960:	d101      	bne.n	8004966 <__sflush_r+0xb2>
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	e7b2      	b.n	80048cc <__sflush_r+0x18>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7ae      	b.n	80048ce <__sflush_r+0x1a>
 8004970:	690f      	ldr	r7, [r1, #16]
 8004972:	2f00      	cmp	r7, #0
 8004974:	d0aa      	beq.n	80048cc <__sflush_r+0x18>
 8004976:	0793      	lsls	r3, r2, #30
 8004978:	bf18      	it	ne
 800497a:	2300      	movne	r3, #0
 800497c:	680e      	ldr	r6, [r1, #0]
 800497e:	bf08      	it	eq
 8004980:	694b      	ldreq	r3, [r1, #20]
 8004982:	1bf6      	subs	r6, r6, r7
 8004984:	600f      	str	r7, [r1, #0]
 8004986:	608b      	str	r3, [r1, #8]
 8004988:	2e00      	cmp	r6, #0
 800498a:	dd9f      	ble.n	80048cc <__sflush_r+0x18>
 800498c:	4633      	mov	r3, r6
 800498e:	463a      	mov	r2, r7
 8004990:	4628      	mov	r0, r5
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004998:	47e0      	blx	ip
 800499a:	2800      	cmp	r0, #0
 800499c:	dc06      	bgt.n	80049ac <__sflush_r+0xf8>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	e790      	b.n	80048ce <__sflush_r+0x1a>
 80049ac:	4407      	add	r7, r0
 80049ae:	1a36      	subs	r6, r6, r0
 80049b0:	e7ea      	b.n	8004988 <__sflush_r+0xd4>
 80049b2:	bf00      	nop
 80049b4:	dfbffffe 	.word	0xdfbffffe

080049b8 <_fflush_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	4605      	mov	r5, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b913      	cbnz	r3, 80049c8 <_fflush_r+0x10>
 80049c2:	2500      	movs	r5, #0
 80049c4:	4628      	mov	r0, r5
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	b118      	cbz	r0, 80049d2 <_fflush_r+0x1a>
 80049ca:	6a03      	ldr	r3, [r0, #32]
 80049cc:	b90b      	cbnz	r3, 80049d2 <_fflush_r+0x1a>
 80049ce:	f7ff f9b1 	bl	8003d34 <__sinit>
 80049d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f3      	beq.n	80049c2 <_fflush_r+0xa>
 80049da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049dc:	07d0      	lsls	r0, r2, #31
 80049de:	d404      	bmi.n	80049ea <_fflush_r+0x32>
 80049e0:	0599      	lsls	r1, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_fflush_r+0x32>
 80049e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e6:	f7ff fb99 	bl	800411c <__retarget_lock_acquire_recursive>
 80049ea:	4628      	mov	r0, r5
 80049ec:	4621      	mov	r1, r4
 80049ee:	f7ff ff61 	bl	80048b4 <__sflush_r>
 80049f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f4:	4605      	mov	r5, r0
 80049f6:	07da      	lsls	r2, r3, #31
 80049f8:	d4e4      	bmi.n	80049c4 <_fflush_r+0xc>
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	059b      	lsls	r3, r3, #22
 80049fe:	d4e1      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a02:	f7ff fb8c 	bl	800411e <__retarget_lock_release_recursive>
 8004a06:	e7dd      	b.n	80049c4 <_fflush_r+0xc>

08004a08 <__swhatbuf_r>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a10:	4615      	mov	r5, r2
 8004a12:	2900      	cmp	r1, #0
 8004a14:	461e      	mov	r6, r3
 8004a16:	b096      	sub	sp, #88	; 0x58
 8004a18:	da0c      	bge.n	8004a34 <__swhatbuf_r+0x2c>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a22:	bf0c      	ite	eq
 8004a24:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a28:	2340      	movne	r3, #64	; 0x40
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6031      	str	r1, [r6, #0]
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	b016      	add	sp, #88	; 0x58
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	466a      	mov	r2, sp
 8004a36:	f000 f849 	bl	8004acc <_fstat_r>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	dbed      	blt.n	8004a1a <__swhatbuf_r+0x12>
 8004a3e:	9901      	ldr	r1, [sp, #4]
 8004a40:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a44:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a48:	4259      	negs	r1, r3
 8004a4a:	4159      	adcs	r1, r3
 8004a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a50:	e7eb      	b.n	8004a2a <__swhatbuf_r+0x22>

08004a52 <__smakebuf_r>:
 8004a52:	898b      	ldrh	r3, [r1, #12]
 8004a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a56:	079d      	lsls	r5, r3, #30
 8004a58:	4606      	mov	r6, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	d507      	bpl.n	8004a6e <__smakebuf_r+0x1c>
 8004a5e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	2301      	movs	r3, #1
 8004a68:	6163      	str	r3, [r4, #20]
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	466a      	mov	r2, sp
 8004a70:	ab01      	add	r3, sp, #4
 8004a72:	f7ff ffc9 	bl	8004a08 <__swhatbuf_r>
 8004a76:	9900      	ldr	r1, [sp, #0]
 8004a78:	4605      	mov	r5, r0
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff fbb8 	bl	80041f0 <_malloc_r>
 8004a80:	b948      	cbnz	r0, 8004a96 <__smakebuf_r+0x44>
 8004a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a86:	059a      	lsls	r2, r3, #22
 8004a88:	d4ef      	bmi.n	8004a6a <__smakebuf_r+0x18>
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	e7e3      	b.n	8004a5e <__smakebuf_r+0xc>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	6020      	str	r0, [r4, #0]
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	9b00      	ldr	r3, [sp, #0]
 8004aa2:	6120      	str	r0, [r4, #16]
 8004aa4:	6163      	str	r3, [r4, #20]
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	b15b      	cbz	r3, 8004ac2 <__smakebuf_r+0x70>
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab0:	f000 f81e 	bl	8004af0 <_isatty_r>
 8004ab4:	b128      	cbz	r0, 8004ac2 <__smakebuf_r+0x70>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f023 0303 	bic.w	r3, r3, #3
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	431d      	orrs	r5, r3
 8004ac6:	81a5      	strh	r5, [r4, #12]
 8004ac8:	e7cf      	b.n	8004a6a <__smakebuf_r+0x18>
	...

08004acc <_fstat_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4d06      	ldr	r5, [pc, #24]	; (8004aec <_fstat_r+0x20>)
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	f7fb fecf 	bl	800087c <_fstat>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d102      	bne.n	8004ae8 <_fstat_r+0x1c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	b103      	cbz	r3, 8004ae8 <_fstat_r+0x1c>
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	200002e0 	.word	0x200002e0

08004af0 <_isatty_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	2300      	movs	r3, #0
 8004af4:	4d05      	ldr	r5, [pc, #20]	; (8004b0c <_isatty_r+0x1c>)
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fb fecd 	bl	800089a <_isatty>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_isatty_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_isatty_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	200002e0 	.word	0x200002e0

08004b10 <_sbrk_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	2300      	movs	r3, #0
 8004b14:	4d05      	ldr	r5, [pc, #20]	; (8004b2c <_sbrk_r+0x1c>)
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fb fed4 	bl	80008c8 <_sbrk>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_sbrk_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_sbrk_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200002e0 	.word	0x200002e0

08004b30 <memchr>:
 8004b30:	4603      	mov	r3, r0
 8004b32:	b510      	push	{r4, lr}
 8004b34:	b2c9      	uxtb	r1, r1
 8004b36:	4402      	add	r2, r0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	d101      	bne.n	8004b42 <memchr+0x12>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	e003      	b.n	8004b4a <memchr+0x1a>
 8004b42:	7804      	ldrb	r4, [r0, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	428c      	cmp	r4, r1
 8004b48:	d1f6      	bne.n	8004b38 <memchr+0x8>
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
